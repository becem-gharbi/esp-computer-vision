/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.10.2023 15:32:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242560;
#else
constexpr int kTensorArenaSize = 241536;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -85, -112, -30, 
  /* [0][1][][] */ 66, -38, 17, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 111, -95, -11, 
  /* [1][1][][] */ -127, 111, 25, 
  /* [1][2][][] */ 17, 0, -12, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -77, 
  /* [3][0][][] */ 119, 125, 57, 
  /* [3][1][][] */ 0, -22, -16, 
  /* [3][2][][] */ -101, -127, -45, 
  /* [4][0][][] */ 33, -52, 4, 
  /* [4][1][][] */ 30, -127, 2, 
  /* [4][2][][] */ 17, -78, -10, 
  /* [5][0][][] */ -65, 30, 2, 
  /* [5][1][][] */ -127, 38, 6, 
  /* [5][2][][] */ -82, 29, 10, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -53, 54, -17, 
  /* [6][2][][] */ -38, -55, -91, 
  /* [7][0][][] */ 35, 26, -18, 
  /* [7][1][][] */ 127, 76, -10, 
  /* [7][2][][] */ 34, 0, -31, 
  /* [8][0][][] */ -19, -29, 53, 
  /* [8][1][][] */ -51, -84, 127, 
  /* [8][2][][] */ -24, -59, 96, 
  /* [9][0][][] */ -24, 58, -12, 
  /* [9][1][][] */ -14, 127, -14, 
  /* [9][2][][] */ -8, 88, -8, 
  /* [10][0][][] */ 24, 86, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 17, 
  /* [11][0][][] */ 8, -17, 10, 
  /* [11][1][][] */ 66, -92, 36, 
  /* [11][2][][] */ -84, 127, -45, 
  /* [12][0][][] */ -41, 49, -11, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 79, 14, -26, 
  /* [13][1][][] */ 127, 100, -23, 
  /* [13][2][][] */ 85, 116, 40, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -15, -69, 82, 
  /* [15][0][][] */ -79, -27, 4, 
  /* [15][1][][] */ -127, -122, 13, 
  /* [15][2][][] */ -30, -75, -9, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.032540787011384964, 0.093588598072528839, 0.039719626307487488, 0.024882838129997253, 0.008631603792309761, 0.011848066002130508, 0.022378526628017426, 0.0089981323108077049, 0.029734406620264053, 0.01060321182012558, 0.063646622002124786, 0.079274259507656097, 0.053547777235507965, 0.0056870831176638603, 0.075850628316402435, 0.010855706408619881, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 3084, -2900, -501, 3322, 57531, 45510, 9372, -12740, 5303, -7970, 2902, -1523, 7705, -44781, -765, 65501, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00012761093967128545, 0.00036701414501294494, 0.0001557632494950667, 9.7579766588751227e-05, 3.3849428291432559e-05, 4.6463006583508104e-05, 8.7758933659642935e-05, 3.5286793718114495e-05, 0.00011660552263492718, 4.1581224650144577e-05, 0.00024959462461993098, 0.0003108794626314193, 0.00020999129628762603, 2.2302288925857283e-05, 0.00029745345818810165, 4.2571398807922378e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 1,-3,0,3,-18,10,8,17,-4,-11,1,-6,-3,-10,7,0, 7,-4,-1,2,15,-3,11,-25,-7,8,-4,80,-11,18,7,0, 3,-4,-4,2,3,-14,-3,12,0,2,-2,-12,4,-8,-2,0, 
  /* [0][1][][] */ 16,-6,-8,3,127,-25,-127,-20,127,127,-3,-7,107,-25,-1,-17, -127,127,127,1,-86,-93,-19,-100,13,-105,127,127,127,127,127,127, 16,-12,-8,0,-10,127,4,-8,-3,-12,-9,-1,9,-6,-10,-7, 
  /* [0][2][][] */ -1,-10,-1,-10,-17,15,55,8,-8,-8,-6,-2,-5,0,1,-10, 22,-12,-3,-127,8,-17,-8,127,-7,1,-4,-18,-10,-57,-4,-34, 4,-4,-1,-1,2,-5,2,-2,1,2,-5,-3,-2,-6,0,-10, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0035990329924970865, 0.0079588610678911209, 0.006930746603757143, 0.0075745228677988052, 0.030143585056066513, 0.021150467917323112, 0.0060051376931369305, 0.019302463158965111, 0.011576876975595951, 0.034282580018043518, 0.0080463802441954613, 0.0088188266381621361, 0.004460544791072607, 0.0082611078396439552, 0.0086536435410380363, 0.014100084081292152, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 27034, -681, -503, 3054, -1415, 796, 11257, 2080, -283, 330, -1892, 2724, 1378, 156, -965, -1630, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 8.4683131717611104e-05, 0.00018726731650531292, 0.00016307638725265861, 0.00017822407244239002, 0.00070926081389188766, 0.00049765809671953321, 0.00014129736518952996, 0.00045417560613714159, 0.0002723970974329859, 0.0008066489826887846, 0.0001893266016850248, 0.00020750181283801794, 0.00010495400056242943, 0.00019437901210039854, 0.00020361514179967344, 0.00033176669967360795, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -13,-10,-22,-66,-21,-34,22,-18,37,7,-30,-7,118,127,-20,-111, 
  /* [1][0][][] */ 127,-60,-41,21,-43,78,-72,-46,-34,82,-36,-54,-7,0,-67,-12, 
  /* [2][0][][] */ -35,-97,43,43,48,-51,-75,-20,29,-89,27,-127,40,-24,-82,22, 
  /* [3][0][][] */ 39,11,13,13,-10,68,-52,-24,127,44,9,25,4,-6,12,22, 
  /* [4][0][][] */ -95,-31,-27,-123,-9,45,52,-127,31,-16,-45,-32,-121,30,-47,-21, 
  /* [5][0][][] */ 86,54,69,-29,48,-49,-127,-123,-15,-79,69,46,-56,49,68,-45, 
  /* [6][0][][] */ 103,38,-113,-72,26,-73,3,-89,-42,11,-127,91,89,-81,8,70, 
  /* [7][0][][] */ -127,-2,98,-26,-64,5,-3,-60,-49,64,83,-31,64,-31,29,29, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0068220808170735836, 0.0089358575642108917, 0.0073341750539839268, 0.0095094256103038788, 0.0067062191665172577, 0.0070220404304563999, 0.0071679260581731796, 0.010546829551458359, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7868, -3099, 12361, -9786, 23568, 7788, -8371, 10662, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00016051955753937364, 0.0002102554717566818, 0.00017256883438676596, 0.00022375119442585856, 0.00015779340174049139, 0.00016522448277100921, 0.00016865709039848298, 0.00024816070799715817, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -35,33,-3,-19,-81,-43,-127,26, 
  /* [1][0][][] */ 80,-71,-56,-57,127,-88,105,30, 
  /* [2][0][][] */ -93,127,-37,-113,51,-14,-22,36, 
  /* [3][0][][] */ 40,27,87,-17,101,91,127,0, 
  /* [4][0][][] */ -78,-127,45,-12,-77,-108,13,-17, 
  /* [5][0][][] */ 127,-18,71,62,-59,-14,-5,-25, 
  /* [6][0][][] */ 20,37,127,-28,41,-37,-47,30, 
  /* [7][0][][] */ 28,2,-127,-37,-43,97,92,-72, 
  /* [8][0][][] */ -13,127,-35,14,70,108,31,61, 
  /* [9][0][][] */ 3,127,-59,73,12,-106,52,105, 
  /* [10][0][][] */ -2,-127,1,-30,-75,-126,-63,-89, 
  /* [11][0][][] */ -127,-82,111,50,-5,-60,104,64, 
  /* [12][0][][] */ -33,56,-127,81,43,-59,-79,100, 
  /* [13][0][][] */ 97,-127,91,72,10,31,35,-58, 
  /* [14][0][][] */ -32,102,-37,-127,-20,-124,-34,-53, 
  /* [15][0][][] */ 36,123,31,-18,39,-72,102,-127, 
  /* [16][0][][] */ -110,-127,-74,98,-45,10,-17,70, 
  /* [17][0][][] */ -31,-122,-127,73,-65,70,-58,67, 
  /* [18][0][][] */ -88,-79,-53,82,-12,70,-3,127, 
  /* [19][0][][] */ 54,-118,92,-127,16,-69,27,-28, 
  /* [20][0][][] */ -7,79,32,6,47,127,75,-9, 
  /* [21][0][][] */ 27,95,42,-29,33,-64,88,-127, 
  /* [22][0][][] */ 19,19,115,22,-2,127,31,-41, 
  /* [23][0][][] */ -105,-59,42,-76,93,96,-66,-127, 
  /* [24][0][][] */ -92,-98,31,-76,112,117,-51,-127, 
  /* [25][0][][] */ 127,9,-63,-15,9,32,-60,-6, 
  /* [26][0][][] */ -124,-35,-127,-24,-43,-26,22,0, 
  /* [27][0][][] */ 85,34,1,-62,-127,-25,87,90, 
  /* [28][0][][] */ -127,-85,-9,43,-75,-108,0,22, 
  /* [29][0][][] */ 113,83,47,-127,40,17,-56,-89, 
  /* [30][0][][] */ -96,-73,39,-76,74,88,-54,-127, 
  /* [31][0][][] */ 50,43,-10,127,14,-78,9,6, 
  /* [32][0][][] */ -35,127,-10,40,17,63,-19,53, 
  /* [33][0][][] */ -33,127,-81,27,25,-36,-25,2, 
  /* [34][0][][] */ -127,-115,-30,102,-30,11,19,98, 
  /* [35][0][][] */ -52,127,-30,6,73,111,55,77, 
  /* [36][0][][] */ 69,16,7,-42,-127,-30,98,96, 
  /* [37][0][][] */ -80,117,32,22,-127,112,-33,-107, 
  /* [38][0][][] */ 42,36,35,18,127,70,108,51, 
  /* [39][0][][] */ -26,-72,31,1,7,32,-95,127, 
  /* [40][0][][] */ -67,-58,-85,127,-16,0,20,78, 
  /* [41][0][][] */ 127,8,42,111,-52,1,5,-25, 
  /* [42][0][][] */ -45,10,-68,-127,52,-111,7,82, 
  /* [43][0][][] */ 26,-7,81,-1,29,127,90,5, 
  /* [44][0][][] */ -26,-24,-65,127,47,15,-29,-42, 
  /* [45][0][][] */ 61,121,104,-120,63,-53,21,-127, 
  /* [46][0][][] */ -26,-127,-42,31,-11,34,-58,109, 
  /* [47][0][][] */ 30,41,109,2,82,127,118,-19, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0040762233547866344, 0.0040854676626622677, 0.0035352983977645636, 0.0033326169941574335, 0.0006431114743463695, 0.0040104235522449017, 0.0055011166259646416, 0.002051470335572958, 0.0028831595554947853, 0.0053808982484042645, 0.0028462877962738276, 0.0030481575522571802, 0.0019388938089832664, 0.0038363118655979633, 0.0032652071677148342, 0.0035322944168001413, 0.0028827071655541658, 0.00077730120392516255, 0.0026077514048665762, 0.0033519705757498741, 0.0034876349382102489, 0.0025147015694528818, 0.0044152424670755863, 0.0027968555223196745, 0.0040763244032859802, 0.0079297767952084541, 0.0034238367807120085, 0.0072209620848298073, 0.0025067026726901531, 0.00070304417749866843, 0.0028133047744631767, 0.0070952414534986019, 0.0038829208351671696, 0.0038915188051760197, 0.0034174243919551373, 0.003163615707308054, 0.003431007731705904, 0.0057765580713748932, 0.0036079694982618093, 0.0060040252283215523, 0.0035543995909392834, 0.0035119440872222185, 0.0034976301249116659, 0.0042983870953321457, 0.0038633458316326141, 0.0025694344658404589, 0.0034082503989338875, 0.0032226827461272478, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1997, -648, -414, 1721, 23123, 2221, -661, 6625, 2121, 1980, 545, 4430, 2101, 878, -1247, 703, 3550, 19003, 4530, -1094, 1943, -1333, -10, 4010, -427, -1001, 2273, -76, 4722, 21047, 3861, -57, 564, -141, 3132, -110, 978, -248, 1841, 1354, 2233, 2809, 383, -571, 1131, 2992, 1540, -226, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00027532406966201961, 0.00027594846324063838, 0.00023878787760622799, 0.00022509797418024391, 4.3438263674033806e-05, 0.00027087968192063272, 0.0003715669154189527, 0.00013856432633474469, 0.00019473987049423158, 0.00036344688851386309, 0.00019224939751438797, 0.00020588446932379156, 0.00013096047041472048, 0.00025911949342116714, 0.00022054485452827066, 0.00023858496570028365, 0.00019470931147225201, 5.250196045381017e-05, 0.00017613772070035338, 0.00022640520182903856, 0.00023556849919259548, 0.0001698527776170522, 0.00029822273063473403, 0.00018891054787673056, 0.00027533087995834649, 0.00053560809465125203, 0.00023125931329559535, 0.00048773200251162052, 0.00016931249410845339, 4.7486351832048967e-05, 0.0001900216011563316, 0.00047924034879542887, 0.00026226765476167202, 0.00026284839259460568, 0.00023082620464265347, 0.00021368297166191041, 0.00023174367379397154, 0.00039017130620777607, 0.00024369636957999319, 0.00040553533472120762, 0.00024007803585845977, 0.0002372104354435578, 0.00023624360619578511, 0.00029032985912635922, 0.00026094546774402261, 0.00017354964802507311, 0.00023020655498839915, 0.00021767258294858038, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -44,-107,-2,-26,127,-57,58,-58,-83,-76,-20,-49,125,29,50,-101,68,-21,9,-31,-77,92,-15,6,-25,93,45,-31,81,-58,10,-32,-108,-76,50,66,27,69,116,-82,-127,-8,25,72,53,-126,75,47, -71,-124,-73,54,-68,110,56,-70,-86,42,88,-115,127,98,127,-54,-74,-91,41,-46,-94,56,-60,118,-78,107,73,-124,105,-42,3,-127,-52,-92,84,119,109,95,127,-74,-123,-80,77,97,74,126,85,74, -10,-64,-64,94,-52,-39,12,-7,106,25,65,-76,22,74,-51,-10,-75,-4,21,-26,-29,-10,-84,-6,-64,45,12,-66,36,57,123,-68,13,13,-14,42,90,58,54,11,-12,94,60,35,38,42,12,-103, 
  /* [0][1][][] */ -102,-74,-13,-85,-85,-65,94,-93,-126,-127,86,-86,98,63,-124,-42,127,-127,-67,-65,-66,81,-30,3,-16,99,91,-46,-106,-60,-13,-31,-90,-127,-127,54,37,81,8,-93,59,-10,70,113,77,127,96,-127, -113,-127,-127,-126,-42,127,127,-127,127,51,127,-127,98,127,76,-127,53,-86,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-19,-122,-127,-97,46,127,127,127,0,-127,109,-108,127,127,127,8,127,96, -57,-65,-112,127,65,-52,47,-17,77,24,16,-61,14,75,86,-38,-19,11,-16,-39,-75,-13,-64,-10,-105,48,18,-80,-55,42,127,-99,-39,11,58,76,97,67,-21,-19,45,127,78,24,53,-43,12,17, 
  /* [0][2][][] */ -127,-28,13,27,-51,-29,11,-23,45,-49,17,-41,14,18,-38,-23,-80,-23,94,-24,-49,31,-58,-23,-1,73,68,-25,39,54,-11,-2,-9,-67,-43,44,8,11,-70,-37,20,-3,31,44,20,67,16,-62, -64,-49,-5,-71,85,45,57,-59,113,20,-46,-76,-1,40,-120,-62,41,8,44,-53,-41,-18,-47,46,-41,72,75,-31,36,5,-30,-40,-38,-31,-64,58,30,2,-120,-82,29,-50,87,73,35,-106,26,4, 6,-34,-43,-13,-41,-22,13,-15,-91,22,-28,-22,-6,21,49,-24,28,42,-7,-35,-52,-22,-11,-16,-46,28,12,-15,2,-58,55,-28,-85,24,21,44,21,14,-62,-30,7,49,28,10,15,1,9,30, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0043986118398606777, 0.0050948760472238064, 0.0083912936970591545, 0.0074403248727321625, 0.024211814627051353, 0.0064247283153235912, 0.0056024575605988503, 0.0053461603820323944, 0.0040811267681419849, 0.0033780350349843502, 0.0032030900474637747, 0.0025818261783570051, 0.0041924682445824146, 0.0035821530036628246, 0.0075061102397739887, 0.0073264851234853268, 0.0055660633370280266, 0.019725020974874496, 0.0064045400358736515, 0.0089005166664719582, 0.0056389425881206989, 0.018145168200135231, 0.0070760347880423069, 0.011269301176071167, 0.0055473409593105316, 0.0048003317788243294, 0.003058064728975296, 0.0047011892311275005, 0.0051713683642446995, 0.037640299648046494, 0.011130009777843952, 0.0040595852769911289, 0.0048334198072552681, 0.0072620050050318241, 0.0074774967506527901, 0.0030441577546298504, 0.0043129641562700272, 0.001983617665246129, 0.0046971831470727921, 0.0030084364116191864, 0.0061452370136976242, 0.0061042080633342266, 0.0035305148921906948, 0.0041615832597017288, 0.0039901444688439369, 0.0094754947349429131, 0.0035988313611596823, 0.0088570807129144669, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 13096, 6555, 4553, 620, 2484, -543, 185, 28018, -2808, 3063, 5436, 55474, -629, -566, -255, 10861, -1875, 12738, 780, 6352, 14567, -109, 4591, -9118, 11015, 639, 603, 12701, -393, -2975, -8378, 10972, 4707, 2361, -586, 3206, -9161, 9854, -1349, 18436, -1318, -261, 2900, 640, -747, -3025, -263, -22, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00010349674994358793, 0.00011987944162683561, 0.00019744220480788499, 0.00017506646690890193, 0.00056968978606164455, 0.00015117008297238499, 0.00013182254042476416, 0.00012579200847540051, 9.6026516985148191e-05, 7.948317943373695e-05, 7.536682824138552e-05, 6.0748850955860689e-05, 9.8646312835626304e-05, 8.4285951743368059e-05, 0.00017661436868365854, 0.00017238789587281644, 0.00013096620386932045, 0.00046411814400926232, 0.00015069506480358541, 0.00020942393166478723, 0.0001326810015598312, 0.00042694513103924692, 0.00016649493773002177, 0.00026516002253629267, 0.0001305256737396121, 0.00011294898285996169, 7.1954462327994406e-05, 0.0001106162162614055, 0.0001216792588820681, 0.00088565412443131208, 0.00026188258198089898, 9.5519651949871331e-05, 0.00011372752487659454, 0.00017087071319110692, 0.00017594110977370292, 7.1627240686211735e-05, 0.00010148151341127232, 4.6673358156112954e-05, 0.00011052195623051375, 7.0786743890494108e-05, 0.0001445938105462119, 0.00014362842193804681, 8.3070939581375569e-05, 9.7919604741036892e-05, 9.3885755632072687e-05, 0.00022295281814876944, 8.4678387793246657e-05, 0.00020840190700255334, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -49,0,29,14,-30,-11,9,6,-42,-6,-66,-55,-25,-64,-12,-34,53,-45,38,43,-20,29,-37,12,4,-41,58,-15,-7,-27,22,10,82,32,36,-127,19,2,-19,-33,6,-24,44,48,37,5,26,3, 
  /* [1][0][][] */ 9,30,66,-28,-17,45,-50,-31,5,21,-15,-94,4,99,-23,60,-25,16,-19,-58,10,-85,-26,18,-75,-10,-6,-126,-26,-12,23,-58,49,79,-44,2,127,-32,3,46,-29,42,-90,-29,117,-15,-38,-26, 
  /* [2][0][][] */ -3,-23,-64,13,-2,49,30,6,-15,39,-4,22,62,-95,18,-63,32,-92,24,37,-22,48,-3,28,-16,58,-25,-67,17,5,15,-66,-49,-88,41,-31,109,21,-13,-58,-9,26,81,29,127,16,17,28, 
  /* [3][0][][] */ -3,28,-68,50,16,-40,-66,-104,15,-26,-37,3,3,27,32,79,-5,19,-38,27,3,-97,29,-61,-71,-6,127,-13,-46,-1,-68,17,-2,-86,9,-12,-19,-38,-20,103,-46,-33,-2,21,40,0,-37,42, 
  /* [4][0][][] */ -27,-50,3,1,30,-25,-10,-7,29,-29,58,-78,1,32,6,12,-18,-22,11,-19,-3,-48,6,-14,13,-6,39,50,32,19,-17,26,-6,0,3,0,-65,81,30,-26,33,-26,-19,-21,-74,14,127,16, 
  /* [5][0][][] */ 43,-16,5,19,24,-43,32,-127,22,-28,-8,117,-77,67,21,-62,-4,-89,14,0,-38,65,-41,-43,-60,78,-22,0,-23,54,-45,-34,28,62,39,-4,-38,-8,-44,-41,8,-36,-43,-13,-33,50,90,18, 
  /* [6][0][][] */ 54,-22,22,-11,-35,-20,-37,20,-42,11,-41,127,-43,-36,-4,58,11,45,10,35,38,-85,-20,23,25,40,-65,5,7,-38,8,42,6,19,-12,-5,14,0,-1,-5,-8,-19,39,54,-3,-34,74,-16, 
  /* [7][0][][] */ -28,9,-10,73,33,43,9,32,19,7,73,-1,127,110,68,50,47,48,-12,4,17,-20,-90,-22,16,-6,-31,69,34,-25,-34,-14,36,8,45,-100,-78,37,38,60,-37,33,86,126,-63,-26,-113,59, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.011523179709911346, 0.0049855206161737442, 0.0058331163600087166, 0.0062029995024204254, 0.0078422632068395615, 0.0067284759134054184, 0.010979825630784035, 0.0063044973649084568, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7525, 16904, -3408, 6613, -908, 2931, -11714, -19701, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00027113364194519818, 0.00011730637197615579, 0.0001372497936245054, 0.00014595293032471091, 0.00018452384392730892, 0.00015831708151381463, 0.00025834885309450328, 0.00014834111789241433, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 61,127,-87,-86,20,84,12,76, 
  /* [1][0][][] */ 63,-70,48,-127,-59,64,-84,-38, 
  /* [2][0][][] */ -29,127,112,48,106,4,57,10, 
  /* [3][0][][] */ 85,33,-99,64,-16,-93,-127,-29, 
  /* [4][0][][] */ -31,31,10,-68,-27,107,127,48, 
  /* [5][0][][] */ 21,83,-127,-77,55,110,39,-39, 
  /* [6][0][][] */ -10,127,56,46,79,23,29,-103, 
  /* [7][0][][] */ 127,-32,-60,45,11,7,124,21, 
  /* [8][0][][] */ 61,127,64,102,101,80,98,-86, 
  /* [9][0][][] */ 45,108,-127,-89,16,100,-7,61, 
  /* [10][0][][] */ -63,-38,17,-56,-11,-26,-49,127, 
  /* [11][0][][] */ 21,-104,-127,-11,29,-18,34,-7, 
  /* [12][0][][] */ -18,-103,-124,-34,-127,0,-77,39, 
  /* [13][0][][] */ -9,4,-96,97,-127,-25,3,-12, 
  /* [14][0][][] */ -69,-39,-127,-6,39,-3,-15,-58, 
  /* [15][0][][] */ 22,-107,-127,15,-113,-35,-36,-17, 
  /* [16][0][][] */ 127,-64,-18,68,-86,28,32,98, 
  /* [17][0][][] */ -29,122,127,-31,-49,-9,-24,-34, 
  /* [18][0][][] */ 12,-127,31,58,-3,-66,39,-76, 
  /* [19][0][][] */ 127,-47,-54,39,-95,-1,41,100, 
  /* [20][0][][] */ -27,-127,82,74,-12,-87,1,-72, 
  /* [21][0][][] */ -14,-62,-18,-39,127,-1,48,21, 
  /* [22][0][][] */ -127,23,-71,50,52,57,-84,-105, 
  /* [23][0][][] */ -84,-56,60,-9,-109,104,127,-43, 
  /* [24][0][][] */ -34,56,-4,-40,-31,127,108,-7, 
  /* [25][0][][] */ -72,-118,-127,-56,-57,-13,-24,-52, 
  /* [26][0][][] */ -11,80,-8,127,-100,32,-59,0, 
  /* [27][0][][] */ 17,-127,33,79,16,-53,1,-125, 
  /* [28][0][][] */ 36,127,56,40,113,-23,21,-94, 
  /* [29][0][][] */ 123,19,-49,-20,121,-127,-100,59, 
  /* [30][0][][] */ 29,-9,30,-127,18,-31,9,-22, 
  /* [31][0][][] */ 47,-47,4,69,-17,40,16,127, 
  /* [32][0][][] */ -104,-73,-7,-62,-89,127,54,86, 
  /* [33][0][][] */ -29,44,38,-46,34,127,-123,82, 
  /* [34][0][][] */ 33,127,-76,-51,13,47,-62,68, 
  /* [35][0][][] */ 8,-127,31,46,-22,-51,46,-67, 
  /* [36][0][][] */ -12,-29,-81,-13,-127,-47,-21,11, 
  /* [37][0][][] */ -48,-127,72,85,-46,-94,-16,-47, 
  /* [38][0][][] */ -72,22,64,-69,-127,-88,-60,86, 
  /* [39][0][][] */ 62,-127,86,46,-8,-74,-16,-82, 
  /* [40][0][][] */ 5,54,22,63,-127,-18,-61,17, 
  /* [41][0][][] */ 100,127,-83,-86,49,35,-5,13, 
  /* [42][0][][] */ -5,-38,-19,11,127,16,47,19, 
  /* [43][0][][] */ 127,33,83,34,-63,-29,61,110, 
  /* [44][0][][] */ 77,42,-10,13,71,-103,-127,17, 
  /* [45][0][][] */ 47,4,19,27,67,-127,0,-58, 
  /* [46][0][][] */ 55,-35,-7,127,43,60,26,66, 
  /* [47][0][][] */ -65,-66,44,52,-43,19,127,-61, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0033231878187507391, 0.0025531828869134188, 0.0009739558445289731, 0.0033181170001626015, 0.0034325351007282734, 0.0029915340710431337, 0.0020074357744306326, 0.00065776624251157045, 0.0018241144716739655, 0.0035350087564438581, 0.0031603020615875721, 0.0031119529157876968, 0.00074158597271889448, 0.003785968292504549, 0.0038280379958450794, 0.00072594982339069247, 0.0038749945815652609, 0.0029119148384779692, 0.0043447907082736492, 0.002616403391584754, 0.0031154099851846695, 0.0030685835517942905, 0.0046643787063658237, 0.00062311795772984624, 0.0020458835642784834, 0.0021100500598549843, 0.0009270280716009438, 0.0038241459988057613, 0.0020083619747310877, 0.0017833608435466886, 0.0062415548600256443, 0.0057450197637081146, 0.0034176388289779425, 0.0030473300721496344, 0.0041199438273906708, 0.0041025499813258648, 0.0026356768794357777, 0.0040973201394081116, 0.0033615909051150084, 0.0032092034816741943, 0.0025494948495179415, 0.003609509440138936, 0.0031266482546925545, 0.0023189987987279892, 0.0023670538794249296, 0.0032177863176912069, 0.0051507032476365566, 0.0023619816638529301, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 3354, 6274, 18812, 1616, 3043, -2818, 7547, 29530, 6824, -943, 5079, -3080, 24751, -2086, 1988, 28067, -550, 2929, 28, 4805, 4149, 4576, 723, 34399, 8077, 5149, 21538, 2005, 7025, 8474, 1053, 1370, 1015, 2561, -419, 550, -4522, -695, 3371, 3069, 5991, 2851, 4881, 6632, 6026, 4418, 2384, 6483, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00017237436259165406, 0.00013243405555840582, 5.0519265641923994e-05, 0.00017211133672390133, 0.00017804621893446892, 0.00015517142310272902, 0.00010412606206955388, 3.4118453186238185e-05, 9.4617149443365633e-05, 0.0001833615533541888, 0.00016392544785048813, 0.00016141757078003138, 3.8466198020614684e-05, 0.00019637886725831777, 0.00019856102881021798, 3.7655150663340464e-05, 0.00020099667017348111, 0.00015104154590517282, 0.00022536508913617581, 0.00013571331510320306, 0.00016159687947947532, 0.00015916799020487815, 0.00024194217985495925, 3.2321240723831579e-05, 0.00010612035111989826, 0.00010944867972284555, 4.8085115849971771e-05, 0.00019835915009025484, 0.00010417409794172272, 9.2503250925801694e-05, 0.00032375057344324887, 0.00029799522599205375, 0.0001772735413396731, 0.00015806556621100754, 0.00021370223839767277, 0.00021280001965351403, 0.00013671304623130709, 0.00021252874284982681, 0.00017436633061151952, 0.0001664619630901143, 0.00013224275608081371, 0.00018722591630648822, 0.00016217981465160847, 0.00012028688797727227, 0.00012277951464056969, 0.00016690716438461095, 0.00026716792490333319, 0.00012251641601324081, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 3,-45,9,15,-23,-85,-43,45,-43,1,1,10,38,-7,-18,6,90,15,28,6,2,-23,-62,19,-1,-7,-5,-15,-71,69,-36,-97,58,-11,-50,-53,-15,-29,14,-28,-16,23,12,12,-9,61,127,-36, -127,-108,-24,127,-78,69,-94,127,24,12,17,-6,44,19,5,-41,-32,53,30,7,10,127,19,127,105,-23,-56,52,71,-127,-23,-67,70,-11,-34,-123,21,11,-51,-62,-127,-14,-101,-125,36,53,53,127, -5,-7,11,11,-32,19,39,38,4,-45,-14,3,-26,-7,3,6,-50,20,-70,-36,-5,-28,127,18,-72,5,9,6,18,48,20,31,-2,-20,-29,66,9,3,17,59,23,-16,25,-39,-10,43,-25,-1, 
  /* [0][1][][] */ -19,-27,-28,11,24,-109,127,-76,-17,16,28,40,127,10,-4,-33,-18,-24,31,60,61,-64,51,13,-48,127,-79,-24,127,-104,40,-127,-39,4,-83,20,17,-59,-36,12,117,127,17,-127,-59,-58,-1,69, 102,-127,127,2,127,61,-66,-44,19,127,127,-127,-111,127,127,127,127,127,127,127,127,114,5,13,127,-85,-127,123,43,117,127,-12,-127,127,127,127,-127,127,-127,-114,41,29,-127,-42,127,-127,-6,96, 31,33,-40,1,-63,127,-120,93,98,-90,14,72,-47,5,15,-66,16,-3,-117,5,21,-114,-32,3,68,-5,-17,127,-80,-42,32,-28,-26,13,77,-32,44,-4,-3,-111,111,-3,40,41,-51,87,91,-67, 
  /* [0][2][][] */ -15,35,7,-25,2,-61,-13,-5,15,3,-9,8,-20,-12,-8,2,-45,17,5,-31,-3,-27,88,-13,-99,8,46,-38,14,1,9,46,-6,-2,-42,40,6,-14,25,64,-26,-5,19,-3,-19,14,-10,19, 43,-19,-33,-31,35,41,123,-117,127,-36,-13,5,-87,-18,-20,-70,-15,105,9,23,5,27,-21,-33,-59,56,98,-16,-102,16,-25,-21,-21,-4,-38,-6,66,-29,2,127,-106,-10,-1,57,37,48,11,-100, -3,33,5,-16,-21,-6,-16,-47,-24,-29,-17,1,16,-9,-8,12,41,37,-21,-19,-9,-30,-45,-14,16,-19,41,-14,-17,7,15,21,31,-20,-32,-63,0,6,27,-2,-6,-15,19,11,-12,13,60,-47, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.0093783168122172356, 0.0062405047938227654, 0.03078729473054409, 0.0085566965863108635, 0.0087518040090799332, 0.013418532907962799, 0.0082687763497233391, 0.013046474196016788, 0.0049416152760386467, 0.010780497454106808, 0.010207772254943848, 0.055626370012760162, 0.017431257292628288, 0.019349651411175728, 0.01512124203145504, 0.026271827518939972, 0.008587895892560482, 0.0034728026948869228, 0.0099075380712747574, 0.011708296835422516, 0.011123857460916042, 0.0075790896080434322, 0.0031251658219844103, 0.019814306870102882, 0.0089034838601946831, 0.015576387755572796, 0.017761526629328728, 0.0081272060051560402, 0.0090569909662008286, 0.012595898471772671, 0.0067098927684128284, 0.0061884750612080097, 0.007826569490134716, 0.009109904058277607, 0.0066833277232944965, 0.01140737347304821, 0.083900235593318939, 0.015201865695416927, 0.0071184001863002777, 0.0067936964333057404, 0.0063243228942155838, 0.0076691941358149052, 0.011431489139795303, 0.0081167547032237053, 0.013113139197230339, 0.0033545559272170067, 0.0034242798574268818, 0.007584842387586832, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -538, 11048, -631, -1084, 2122, -1180, 2066, -1031, -3759, 509, -5433, -125, 2412, -1127, -2325, 4158, 5332, 524, -577, -4123, -6522, 411, 19998, -5324, -2029, -2159, 3890, -6683, -342, 538, -8129, 7560, 3859, 240, 3215, 149, -104, -430, 8506, 1455, 6798, -1528, 1669, 6252, -1492, 12107, -2535, -1730, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00022066627570893615, 0.00014683541667181998, 0.00072440697113052011, 0.00020133404177613556, 0.0002059248072328046, 0.00031573019805364311, 0.00019455944129731506, 0.00030697588226757944, 0.00011627330241026357, 0.00025365877081640065, 0.00024018288240768015, 0.0013088558334857225, 0.00041014724411070347, 0.00045528591726906598, 0.00035579394898377359, 0.00061816064408048987, 0.00020206814224366099, 8.1713005783967674e-05, 0.00023311855329666287, 0.0002754893503151834, 0.00026173781952820718, 0.00017833152378443629, 7.3533316026441753e-05, 0.00046621900401078165, 0.00020949373720213771, 0.00036650325637310743, 0.00041791828698478639, 0.00019122837693430483, 0.00021310566808097064, 0.00029637408442795277, 0.00015787984011694789, 0.00014561117859557271, 0.00018415457452647388, 0.00021435068629216403, 0.00015725477715022862, 0.00026840879581868649, 0.0019741232972592115, 0.00035769096575677395, 0.00016749177302699536, 0.00015985168283805251, 0.00014880759408697486, 0.00018045163596980274, 0.00026897623320110142, 0.00019098246411886066, 0.00030854446231387556, 7.8930730524007231e-05, 8.0571291618980467e-05, 0.00017846688569989055, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -33,-43,-18,-76,-4,-12,88,90,-109,-91,-29,4,-63,2,-68,40,-85,14,17,127,63,-33,18,92,80,70,19,5,-97,-56,-78,-70,-57,109,35,-48,35,-28,93,-3,33,5,1,-112,41,-31,-32,-92, 
  /* [1][0][][] */ -15,48,-23,-28,-66,59,-26,-59,-35,70,-18,19,47,44,-56,-10,-25,-127,66,-50,110,11,-65,23,59,-3,-79,69,40,-13,69,26,-45,-13,-14,-16,5,102,-14,-29,66,51,-1,4,103,34,-31,55, 
  /* [2][0][][] */ -29,-35,112,5,84,-47,-9,19,-36,1,-11,46,10,-42,-48,-127,-58,-98,-26,14,-89,21,-39,-35,-50,22,1,-42,-42,6,-30,-5,-3,-7,23,-5,27,-27,-55,7,34,-29,33,-37,-46,-43,-71,-51, 
  /* [3][0][][] */ 52,19,66,10,17,-26,35,64,-53,-32,45,-27,-71,50,-17,49,61,29,-31,25,-107,-66,127,2,13,-3,-63,-30,-46,68,115,-69,6,-110,-22,46,-11,-80,-19,77,-75,-60,75,-6,-94,-73,55,-4, 
  /* [4][0][][] */ 19,-18,79,-32,13,-6,-3,-4,-57,-16,-23,4,50,-77,43,-96,37,49,-4,-40,12,38,12,18,6,-6,60,-16,28,24,-127,-17,-26,-18,8,22,48,-3,35,7,-43,-18,-68,24,-14,-101,-3,32, 
  /* [5][0][][] */ 23,-48,66,31,28,24,26,-3,-76,-14,-50,29,30,10,11,-52,99,78,-4,-13,93,-63,127,-91,-22,55,3,41,13,14,-36,-46,-19,-46,-37,8,42,28,68,3,-79,31,38,27,53,-22,78,-2, 
  /* [6][0][][] */ -44,59,-125,94,57,18,43,21,-24,-9,74,-89,-89,-25,-22,31,-126,34,-1,93,24,42,-95,-87,-3,-22,12,87,-28,-39,-46,-7,58,80,-50,-33,-16,-7,86,10,81,68,-127,-59,-39,111,-56,-34, 
  /* [7][0][][] */ 38,73,-88,17,17,59,123,70,50,86,-105,0,-47,13,-67,-42,33,42,127,102,92,9,110,24,103,110,-46,108,-76,36,7,-61,15,-71,-24,27,-11,106,-67,82,-78,44,-8,-79,79,-20,45,-41, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0040104389190673828, 0.0047402144409716129, 0.0058326651342213154, 0.004658043384552002, 0.0048225084319710732, 0.0054723150096833706, 0.0038172444328665733, 0.0035707976203411818, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 2791, 1448, 23415, -3846, 5175, -15343, 1547, -14531, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.4363269454333931e-05, 0.00011153445666423067, 0.00013723918527830392, 0.00010960102372337133, 0.00011347078543622047, 0.00012876035179942846, 8.9817520347423851e-05, 8.401877130381763e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 80,12,127,-47,55,100,-69,-42, 
  /* [1][0][][] */ 10,-87,-127,11,53,30,28,4, 
  /* [2][0][][] */ -127,-7,-57,-33,64,24,-58,-38, 
  /* [3][0][][] */ 45,72,127,-85,-12,-113,-4,-14, 
  /* [4][0][][] */ -127,22,-50,-25,44,17,-48,-59, 
  /* [5][0][][] */ -105,26,-54,-17,12,38,-88,-127, 
  /* [6][0][][] */ -47,-124,-127,49,99,9,4,40, 
  /* [7][0][][] */ -68,-127,-85,-77,-59,-59,25,81, 
  /* [8][0][][] */ 98,28,-22,-14,97,-82,-127,8, 
  /* [9][0][][] */ -34,49,-48,81,-55,-37,127,-22, 
  /* [10][0][][] */ -24,125,35,61,127,-22,-7,48, 
  /* [11][0][][] */ -78,-29,-14,-4,-79,102,127,0, 
  /* [12][0][][] */ 76,30,-127,43,-12,-30,-71,-15, 
  /* [13][0][][] */ 66,-35,-73,9,10,-127,-27,-28, 
  /* [14][0][][] */ 4,-75,64,-9,127,-127,-66,3, 
  /* [15][0][][] */ -46,-42,-1,127,73,83,-82,35, 
  /* [16][0][][] */ 117,29,-39,21,78,-101,-127,-25, 
  /* [17][0][][] */ 59,127,58,68,44,60,24,-87, 
  /* [18][0][][] */ 36,-26,2,-11,127,-1,25,-11, 
  /* [19][0][][] */ 9,127,32,13,-124,22,24,-36, 
  /* [20][0][][] */ -43,16,65,-127,21,38,-15,105, 
  /* [21][0][][] */ -26,65,23,-127,26,49,-15,110, 
  /* [22][0][][] */ -60,-72,-113,7,-127,118,124,-31, 
  /* [23][0][][] */ 98,42,-127,16,28,-36,-80,-18, 
  /* [24][0][][] */ -64,55,12,6,-23,80,-127,97, 
  /* [25][0][][] */ -101,-58,-127,1,-64,-82,69,92, 
  /* [26][0][][] */ 48,-5,-36,-32,113,-18,127,-45, 
  /* [27][0][][] */ 127,-68,29,98,11,26,-25,102, 
  /* [28][0][][] */ 53,65,65,-15,127,-69,63,-14, 
  /* [29][0][][] */ -19,-11,-28,-43,-67,16,127,-25, 
  /* [30][0][][] */ 62,-127,-71,-76,-108,-7,13,-57, 
  /* [31][0][][] */ 10,33,-7,-4,-127,-2,-31,-11, 
  /* [32][0][][] */ 48,-61,-61,95,-3,-83,116,-127, 
  /* [33][0][][] */ 44,127,48,36,47,-36,-19,-22, 
  /* [34][0][][] */ -124,-38,127,-12,-26,116,102,11, 
  /* [35][0][][] */ -28,66,127,-4,-47,-59,-30,32, 
  /* [36][0][][] */ -101,2,119,-16,-16,127,79,17, 
  /* [37][0][][] */ -23,-81,-2,-127,-52,-83,62,44, 
  /* [38][0][][] */ 43,-13,86,-56,54,54,-127,11, 
  /* [39][0][][] */ -16,95,-127,-54,-19,4,2,76, 
  /* [40][0][][] */ 65,-52,11,25,5,-1,5,127, 
  /* [41][0][][] */ 1,69,127,4,3,84,-66,41, 
  /* [42][0][][] */ 61,-127,-101,-7,-101,23,22,-77, 
  /* [43][0][][] */ -9,-77,37,-68,127,-45,12,42, 
  /* [44][0][][] */ -4,127,107,40,6,57,-75,4, 
  /* [45][0][][] */ -38,42,15,84,-112,60,-127,21, 
  /* [46][0][][] */ -46,-41,60,46,-127,-114,-29,-5, 
  /* [47][0][][] */ -15,57,46,-110,-127,44,-15,58, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0025712810456752777, 0.0031472083646804094, 0.0032178943511098623, 0.0023518691305071115, 0.0022890863474458456, 0.0023040063679218292, 0.0021903121378272772, 0.0017156798858195543, 0.0027232994325459003, 0.0038237825501710176, 0.0021823160350322723, 0.0020628804340958595, 0.0035119601525366306, 0.0032878411002457142, 0.0028156812768429518, 0.0017131227068603039, 0.0028721452690660954, 0.0024037542752921581, 0.0018304948462173343, 0.0033910989295691252, 0.0038708318024873734, 0.0032388889230787754, 0.0019607688300311565, 0.0018624603981152177, 0.0026888630818575621, 0.0022512371651828289, 0.003145136870443821, 0.0030682962387800217, 0.0013446862576529384, 0.0033240318298339844, 0.0018061521695926785, 0.0018594337161630392, 0.0025840403977781534, 0.0021979259327054024, 0.0025754319503903389, 0.0031869600061327219, 0.0024968939833343029, 0.0028243970591574907, 0.0027151901740580797, 0.0024516521953046322, 0.0034337502438575029, 0.0012850175844505429, 0.0016564022516831756, 0.0031030557584017515, 0.0014377965126186609, 0.0030018738470971584, 0.0027016852982342243, 0.0026935574132949114, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 2694, -1886, 911, -2927, 4826, -1089, 4866, -4748, 1935, 760, 2728, 5415, 643, -522, 886, 6800, -2024, 4577, 7137, 1095, -874, 2512, -1382, 6894, 2305, 2734, 1460, -1174, 9175, -578, 3789, -2641, -784, 5323, -1006, 2375, 2531, 1138, 517, 4499, 2192, 10336, -4775, 1942, 8539, -24, 3071, 3268, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00017555849626660347, 0.0002148808998754248, 0.00021970710076857358, 0.00016057777975220233, 0.00015629117842763662, 0.00015730987070128322, 0.00014954720973037183, 0.00011714090214809403, 0.00018593780987430364, 0.00026107512530870736, 0.00014900126552674919, 0.00014084660506341606, 0.00023978493118193001, 0.00022448283561971039, 0.00019224533753003925, 0.00011696630826918408, 0.00019610050367191434, 0.00016412032709922642, 0.00012498008436523378, 0.00023153293295763433, 0.0002642874896991998, 0.00022114053717814386, 0.00013387475337367505, 0.00012716258061118424, 0.00018358661327511072, 0.00015370696200989187, 0.00021473945525940508, 0.00020949303871020675, 9.1810696176253259e-05, 0.00022695380903314799, 0.00012331805191934109, 0.0001269559288630262, 0.00017642966122366488, 0.00015006704779807478, 0.00017584190936759114, 0.00021759500668849796, 0.0001704796013655141, 0.00019284040899947286, 0.00018538413860369474, 0.00016739063721615821, 0.00023444501857738942, 8.7736720161046833e-05, 0.00011309362162137404, 0.00021186629601288587, 9.8167955002281815e-05, 0.00020495793432928622, 0.0001844620710471645, 0.0001839071192080155, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -77,35,-119,89,-110,48,-27,105,-64,-66,59,-53,47,-92,-41,-54,91,77,75,-121,85,-113,74,-97,-93,-43,72,127,-79,-48,-90,67,69,-88,55,-88,-64,-126,85,-49,33,-70,127,-70,93,65,-64,-7, -113,66,-89,116,-81,112,-45,98,-127,-93,77,-83,81,-97,-81,-71,99,96,127,-124,112,-94,107,-127,-79,-99,89,91,42,-93,-93,80,97,-127,85,-90,-93,-127,99,-64,-127,93,86,-72,-26,98,-47,-101, -40,62,9,28,-28,60,-38,5,-66,-28,44,-37,39,-54,-27,-3,39,44,69,-31,41,-67,44,-11,-49,-30,10,22,109,-32,-54,-15,36,-84,37,-17,-41,-42,33,-33,-111,-36,68,-42,-77,69,-17,-102, 
  /* [0][1][][] */ -75,85,-62,127,-93,84,-89,127,-95,-118,85,-95,94,-103,-93,-109,121,76,-73,-94,114,-125,127,-91,-93,-102,94,127,-119,-81,-127,49,69,31,97,-112,-102,-89,95,-79,-87,-90,101,-104,127,68,-127,-121, -127,127,-127,126,-127,127,-127,6,-119,-127,127,-127,127,-127,-127,-127,127,127,-45,-127,127,-127,121,-107,-127,-127,127,103,19,-127,-103,127,127,44,127,-127,-127,-91,127,-127,-123,127,97,-127,-40,127,-120,-120, -58,63,-79,45,-82,46,-68,31,-72,-25,58,-57,50,-79,-50,-21,76,45,-45,-16,43,-50,57,-36,-94,-42,61,52,127,-86,-43,32,53,11,48,-36,-42,5,48,-37,-53,-54,52,-43,-79,58,-34,-106, 
  /* [0][2][][] */ -43,25,2,61,-40,34,-42,52,-56,-34,32,-35,31,-41,-39,-51,60,23,-74,-18,22,-25,30,-16,-46,-56,25,12,-59,-36,-24,18,26,50,51,-60,-26,-41,21,-66,-83,-36,14,-62,69,16,-72,-72, -75,46,-90,77,-73,43,-61,69,-38,-51,49,-64,67,-58,-70,-69,80,51,-96,-34,38,-31,36,-28,-46,-61,48,25,15,-80,-46,44,35,79,64,-83,-35,-37,33,-61,-34,67,31,-79,-12,47,-74,-127, -17,7,-84,15,-59,-13,-19,109,-3,-2,16,-43,8,-24,-26,6,41,11,-71,12,5,-17,4,0,-33,-29,20,19,79,-14,-7,13,0,51,10,-64,-8,-22,20,-8,13,0,-8,-25,-50,14,-14,-105, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0046694302000105381, 0.0072727268561720848, 0.0030317632481455803, 0.0053286692127585411, 0.004060438834130764, 0.0046145832166075706, 0.0030800688546150923, 0.010990711860358715, 0.0048498162068426609, 0.0031605316326022148, 0.0028800459112972021, 0.0044863088987767696, 0.0045583248138427734, 0.0038465894758701324, 0.0021252043079584837, 0.0035746102221310139, 0.0033342733513563871, 0.0037040379829704762, 0.0067256679758429527, 0.0023774611763656139, 0.0035795974545180798, 0.0030235445592552423, 0.0044566742144525051, 0.0077506415545940399, 0.0036587503273040056, 0.0034513245336711407, 0.0033188844099640846, 0.0025528799742460251, 0.0090112481266260147, 0.0056585045531392097, 0.0032230797223746777, 0.019663970917463303, 0.0054080751724541187, 0.006397545337677002, 0.0045649493113160133, 0.0035649619530886412, 0.0052075213752686977, 0.0032122333068400621, 0.0048522260040044785, 0.0055663874372839928, 0.0040422249585390091, 0.0096391560509800911, 0.010518584400415421, 0.004259349312633276, 0.0075994199141860008, 0.0037783558946102858, 0.0026557764504104853, 0.00272364541888237, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 13764, -386, 19594, -469, 17590, -1796, 29375, 323, 10220, 29484, 2123, 24471, -2171, 12245, 35097, 23119, 79, -3277, 3875, 41818, -1322, 18928, -18, 16416, 15526, 32515, -1871, -2397, -5897, 12597, 19264, -323, -482, -793, -866, 16002, 10394, 24960, 87, 15786, 20901, -596, 500, 12729, -1055, -1326, 34133, 31446, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0001098689463105984, 0.00017112298519350588, 7.1335605753120035e-05, 0.00012538045120891184, 9.5539740868844092e-05, 0.00010857843153644353, 7.2472212195862085e-05, 0.000258604995906353, 0.00011411332525312901, 7.4365452746860683e-05, 6.7765788116957992e-05, 0.00010556021152297035, 0.00010725470201577991, 9.0507986897137016e-05, 5.0004808144876733e-05, 8.4108476585242897e-05, 7.8453493188135326e-05, 8.7153835920616984e-05, 0.00015825101581867784, 5.5940265156095847e-05, 8.4225823229644448e-05, 7.1142225351650268e-05, 0.00010486292740097269, 0.00018236803589388728, 8.6088242824189365e-05, 8.1207639595959336e-05, 7.8091397881507874e-05, 6.0067766753491014e-05, 0.00021202936477493495, 0.00013314129319041967, 7.5837167969439179e-05, 0.00046268166624940932, 0.00012724882981274277, 0.00015053048264235258, 0.00010741057485574856, 8.388145943172276e-05, 0.00012252992019057274, 7.5581963756121695e-05, 0.00011417002679081634, 0.00013097382907290012, 9.5111179689411074e-05, 0.00022680367692373693, 0.00024749612202867866, 0.00010021998605225235, 0.00017880988889373839, 8.8902495917864144e-05, 6.2488856201525778e-05, 6.4085776102729142e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 31,40,24,-34,71,64,-41,59,-17,109,5,48,-38,40,-13,45,32,80,56,-73,-66,79,-5,46,63,43,25,45,-53,-54,-6,99,-25,15,-78,52,52,-127,-40,12,22,-42,57,-4,-9,-54,-74,-16, 
  /* [1][0][][] */ -52,-1,-82,-41,8,92,-54,17,-12,-34,-42,34,59,-20,-29,-27,-26,-30,-11,16,-62,43,-104,-39,-53,-36,46,66,-23,-28,43,-42,11,-58,-29,50,13,-57,127,-29,-20,30,-47,-17,35,54,25,14, 
  /* [2][0][][] */ -5,9,61,-26,-16,-87,24,12,101,81,-62,18,108,-30,127,74,-72,-11,-19,28,89,-90,-39,-118,4,-25,32,-64,36,56,-44,20,26,-29,54,45,-70,28,8,-36,38,25,55,-14,15,-80,94,-61, 
  /* [3][0][][] */ 38,0,-26,-29,28,112,15,-18,39,-49,24,-24,-48,7,11,38,-35,-64,25,-127,-14,-1,-27,-19,-44,88,112,65,-10,-40,28,37,57,-28,97,30,-46,-54,3,34,14,3,-18,-3,29,24,-10,-25, 
  /* [4][0][][] */ 94,-8,3,-53,90,84,44,9,85,-9,-105,30,35,-5,12,-20,-106,-124,-18,-93,-13,16,-40,-37,-86,127,-99,127,-53,-46,24,84,36,-56,19,-24,-16,16,-22,28,-53,-10,-14,48,-58,110,-28,-50, 
  /* [5][0][][] */ 0,-6,-60,7,-20,56,15,-24,59,57,38,81,52,-25,30,-3,-34,127,-27,36,11,-2,-65,-10,33,2,-60,-31,-14,22,17,-19,-36,2,43,12,-45,-6,-80,6,86,-16,29,45,-17,8,-37,27, 
  /* [6][0][][] */ 63,17,16,69,-10,-31,98,-54,3,73,127,109,45,43,-52,61,40,-46,-77,96,50,-68,-46,61,-92,91,95,-9,120,59,-33,-3,96,-62,-124,-7,102,31,1,-1,7,58,53,-42,68,125,45,4, 
  /* [7][0][][] */ -95,-2,-32,29,-72,-64,26,46,83,124,-57,-74,-99,14,-17,-12,-79,100,9,121,-49,42,13,35,-19,-95,-25,-86,30,49,-6,10,-17,9,14,-17,6,-59,127,6,10,43,13,-16,54,74,-30,-4, 
  /* [8][0][][] */ -12,-93,49,-62,52,-60,74,-42,-31,-122,30,13,-32,0,28,28,-1,8,-44,100,6,33,-21,30,65,-12,-70,-34,-127,-22,-54,-118,5,-54,1,82,-12,35,106,13,11,-4,67,115,-3,-72,-43,82, 
  /* [9][0][][] */ 23,-40,14,-62,30,88,-41,46,24,-47,-33,-19,19,-48,110,-13,9,-102,32,38,-78,45,54,-30,-18,-77,-23,70,61,69,-39,-31,-47,25,-6,127,-23,-44,-59,-30,-24,-8,31,103,60,71,-68,18, 
  /* [10][0][][] */ -12,17,-26,-7,18,27,-62,-41,48,28,63,-5,-32,-15,47,-47,-58,127,-5,46,1,-10,17,32,-43,44,3,81,41,8,-32,-11,69,10,-5,25,4,-46,-38,18,-84,4,26,-16,19,43,23,40, 
  /* [11][0][][] */ -30,47,-24,38,31,62,0,10,16,14,-127,-69,78,12,-10,-48,1,28,-49,-48,-11,-8,107,10,46,12,-17,36,-6,27,-6,45,29,-6,-46,-2,49,82,103,21,31,-28,67,-4,-46,-18,90,5, 
  /* [12][0][][] */ -62,0,37,17,-57,-60,4,1,-35,-40,-127,13,67,-81,21,35,44,100,98,-114,-33,44,-41,-84,1,-19,31,-21,5,14,-20,72,68,88,35,-31,-54,-28,28,-2,-37,12,60,-1,35,-16,-40,-37, 
  /* [13][0][][] */ -51,-113,-52,-108,3,28,54,15,-120,26,120,-67,54,43,127,11,115,27,-14,-92,73,-72,121,0,-70,7,-20,7,-43,-101,-114,16,51,-23,-70,69,32,-65,87,-81,-4,57,74,42,50,-41,112,-58, 
  /* [14][0][][] */ 68,24,-52,3,-40,14,-89,-26,-30,58,54,44,-9,-52,16,-45,50,-118,30,14,87,-59,25,-11,-10,124,-89,1,-69,-26,-93,6,127,46,86,-18,-82,14,-25,55,-4,-55,108,-24,-57,-47,-52,54, 
  /* [15][0][][] */ -58,17,42,20,92,4,-1,46,22,78,-19,53,52,-21,-36,-10,14,36,1,-37,25,-30,-44,-53,56,-66,-35,59,-28,-2,11,16,-57,0,127,-2,-84,5,59,-16,-52,-21,27,-5,-34,-36,-12,14, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0051564062014222145, 0.0067199282348155975, 0.0060877902433276176, 0.0068403575569391251, 0.0042900489643216133, 0.0066051040776073933, 0.0035679249558597803, 0.0062125218100845814, 0.0038033900782465935, 0.0034226586576551199, 0.0069024390541017056, 0.0057897935621440411, 0.0052809054031968117, 0.0047092330642044544, 0.0058470387011766434, 0.0066267922520637512, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -3000, 12919, -25369, 3498, 14019, -16418, -48753, -10203, -4746, 8290, -17204, -15930, 7464, -14307, -4697, -2487, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00010359637235524133, 0.00013500879867933691, 0.00012230862921569496, 0.00013742831652052701, 8.6190557340160012e-05, 0.00013270188355818391, 7.1682501584291458e-05, 0.00012481458543334156, 7.6413183705881238e-05, 6.8763984018005431e-05, 0.00013867559027858078, 0.00011632163659669459, 0.00010609766468405724, 9.4612303655594587e-05, 0.00011747173994081095, 0.0001331376115558669, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 35,17,3,52,-127,-21,86,45,42,81,-32,42,7,8,31,77, 
  /* [1][0][][] */ -9,28,-75,-6,127,99,-11,-5,-32,27,-65,52,-53,85,-39,-43, 
  /* [2][0][][] */ -39,61,71,-6,62,80,6,45,32,-8,44,-14,54,-127,-1,5, 
  /* [3][0][][] */ 127,-24,22,4,30,23,-18,7,31,43,-59,-23,-45,48,-41,50, 
  /* [4][0][][] */ -92,-8,23,35,-122,-1,-86,-40,-27,37,-26,-64,-32,28,-44,127, 
  /* [5][0][][] */ -105,13,61,7,127,31,10,23,-52,35,-35,24,-60,69,-87,-18, 
  /* [6][0][][] */ -127,27,-32,24,-11,-67,73,12,6,-24,-54,32,4,9,-42,10, 
  /* [7][0][][] */ 1,127,62,-53,82,40,123,-4,44,10,27,67,122,20,-45,-11, 
  /* [8][0][][] */ -20,-25,-82,62,-48,66,-41,-70,49,-41,88,28,127,61,-103,-9, 
  /* [9][0][][] */ -26,-127,-24,108,-47,-60,-17,56,49,48,15,75,-79,7,-18,-42, 
  /* [10][0][][] */ -50,-12,-115,45,-102,79,78,-44,-3,-41,89,-7,21,127,-62,88, 
  /* [11][0][][] */ -27,-110,-39,37,-6,90,19,1,38,-13,27,-65,-9,127,-106,97, 
  /* [12][0][][] */ -32,-80,-70,66,-87,-127,6,52,77,74,-36,107,8,-59,-26,-12, 
  /* [13][0][][] */ -66,-17,-36,-4,-17,-5,33,18,-19,127,-6,-24,37,27,7,-11, 
  /* [14][0][][] */ -108,-30,-47,-42,8,84,-34,-71,127,-44,79,54,87,-26,-68,-102, 
  /* [15][0][][] */ 2,-127,99,-54,-59,-30,3,70,19,-54,-92,-34,86,-49,-33,-50, 
  /* [16][0][][] */ -26,-22,18,-37,30,30,-14,-19,58,-127,42,-17,-12,-12,-83,-83, 
  /* [17][0][][] */ -15,-1,41,-67,23,-12,-49,5,97,-54,26,77,121,-73,-16,-127, 
  /* [18][0][][] */ 60,14,-50,-127,-2,-5,126,-16,19,44,-3,81,-26,100,-37,-113, 
  /* [19][0][][] */ -42,-59,-26,-75,-127,38,-22,4,46,-49,25,-110,-12,-25,-20,2, 
  /* [20][0][][] */ 19,76,66,-91,61,-3,-46,79,-109,-127,36,-88,-40,106,-15,-11, 
  /* [21][0][][] */ 16,-95,-127,0,89,14,89,117,-91,-89,-15,28,99,-108,-18,40, 
  /* [22][0][][] */ 49,1,75,-14,-5,20,84,25,12,114,38,29,-2,1,127,4, 
  /* [23][0][][] */ -126,-55,-28,51,47,51,23,6,-13,4,10,-86,1,50,52,127, 
  /* [24][0][][] */ -16,-12,51,14,8,-84,-9,-16,6,117,-127,76,-38,-39,60,-49, 
  /* [25][0][][] */ 111,-55,70,127,30,-16,-16,69,-119,74,93,-63,7,55,66,-2, 
  /* [26][0][][] */ -25,37,9,47,-61,112,-20,43,-71,-39,-79,37,-1,27,46,-127, 
  /* [27][0][][] */ 40,6,-9,-44,-47,3,-73,10,-101,-26,-62,-39,-66,41,-3,127, 
  /* [28][0][][] */ -67,27,22,1,33,-14,-127,10,-8,-31,-2,-9,7,-51,-77,-20, 
  /* [29][0][][] */ -32,-115,-26,89,-32,8,127,8,73,54,-110,63,51,-28,-42,80, 
  /* [30][0][][] */ 45,-44,-68,4,-127,11,56,-35,10,11,2,-19,-21,53,1,75, 
  /* [31][0][][] */ -127,9,12,86,-35,1,-44,-13,-33,-49,6,-24,-24,-53,-21,102, 
  /* [32][0][][] */ -127,-51,-91,-2,-96,-52,8,-21,116,54,-57,-57,45,80,16,-1, 
  /* [33][0][][] */ -7,15,-109,40,-127,-108,53,-24,-111,29,-67,-64,-7,123,70,56, 
  /* [34][0][][] */ 38,44,9,26,-103,-50,25,13,29,-127,-24,28,-18,-9,55,91, 
  /* [35][0][][] */ 61,13,-54,12,-127,5,71,-1,26,32,-10,9,17,65,30,56, 
  /* [36][0][][] */ 0,13,-56,65,127,-28,40,85,-83,24,-88,-87,13,-28,20,21, 
  /* [37][0][][] */ -117,49,4,-65,47,-70,-41,-41,-2,-23,-31,26,59,-110,-11,-127, 
  /* [38][0][][] */ 42,87,49,-61,-116,-101,-127,-58,-64,-92,33,39,-59,-95,78,3, 
  /* [39][0][][] */ 9,-23,5,68,30,79,83,-61,-38,70,7,-21,-10,118,41,127, 
  /* [40][0][][] */ 84,58,75,89,-71,-25,6,-13,-92,50,-3,-20,-62,-44,127,11, 
  /* [41][0][][] */ -26,-7,9,46,-85,127,3,66,-53,27,-98,10,7,50,39,-114, 
  /* [42][0][][] */ 0,-102,47,-18,127,20,53,24,-34,-76,-83,-16,-38,0,-12,22, 
  /* [43][0][][] */ -45,-81,-53,7,116,23,-1,104,-68,-79,-127,-98,108,-32,-67,65, 
  /* [44][0][][] */ -26,-44,-74,-100,35,88,91,22,-32,-127,-69,78,-58,39,29,110, 
  /* [45][0][][] */ 14,-67,-66,-13,-127,69,-46,-86,64,-16,13,-49,10,16,-33,39, 
  /* [46][0][][] */ 32,-77,-19,12,66,-79,-11,127,-22,-40,45,78,-53,-58,60,-108, 
  /* [47][0][][] */ -89,-29,11,71,-8,14,29,25,-6,122,51,93,-58,42,-12,127, 
  /* [48][0][][] */ 39,-11,-82,-84,29,-57,10,52,41,-77,-2,19,-60,1,-43,-127, 
  /* [49][0][][] */ 70,30,10,37,-4,-25,34,72,-15,127,-35,59,-29,2,80,87, 
  /* [50][0][][] */ 3,2,11,4,-127,-16,-9,-54,60,19,20,50,-19,-56,12,-1, 
  /* [51][0][][] */ 10,4,-4,-127,-19,77,46,-42,8,10,27,-47,66,79,-16,19, 
  /* [52][0][][] */ 37,-34,7,-83,108,-120,-13,-30,51,7,127,-56,55,17,-38,84, 
  /* [53][0][][] */ -80,-60,32,-28,-40,-127,25,-109,-5,84,-92,87,-39,1,20,-82, 
  /* [54][0][][] */ 38,74,34,-18,-127,-28,-56,-97,-12,4,52,44,-66,-48,37,16, 
  /* [55][0][][] */ 23,16,-41,81,-41,29,35,-3,11,127,24,55,-2,6,-1,44, 
  /* [56][0][][] */ 24,-83,-75,101,-72,44,2,27,127,-20,24,26,-17,-22,38,58, 
  /* [57][0][][] */ 43,33,96,-97,79,2,-6,-5,96,-46,27,127,41,-59,99,-53, 
  /* [58][0][][] */ 91,-66,23,-80,40,27,-1,127,60,110,-3,50,53,8,116,-9, 
  /* [59][0][][] */ -57,43,17,-39,-20,-78,6,6,-36,9,-69,-92,-127,-48,60,-6, 
  /* [60][0][][] */ 40,-29,28,9,15,-15,16,-56,26,127,-15,61,-8,-34,-23,-26, 
  /* [61][0][][] */ 63,62,16,-22,-94,-127,-24,-67,-60,-18,-23,17,-76,-59,89,87, 
  /* [62][0][][] */ -17,75,-31,45,-45,127,-51,27,-60,12,-35,39,-19,39,51,-85, 
  /* [63][0][][] */ 34,-17,-70,-127,-25,-39,79,-10,-6,-104,-31,24,-42,76,24,-37, 
  /* [64][0][][] */ -49,26,16,-29,41,-56,28,60,-127,-15,-71,-53,-33,60,36,59, 
  /* [65][0][][] */ -57,-4,-49,-13,70,53,-50,-73,-117,-61,13,-10,-127,110,-53,56, 
  /* [66][0][][] */ -3,70,-11,31,-43,127,-12,8,-57,11,-38,37,-26,35,45,-80, 
  /* [67][0][][] */ 26,-22,-49,-4,23,-79,52,-84,16,32,7,113,-72,-9,-18,-127, 
  /* [68][0][][] */ 11,-127,-37,60,-18,13,36,100,43,28,49,8,-84,31,-22,6, 
  /* [69][0][][] */ -1,73,25,-85,58,16,-43,95,38,118,52,72,71,-66,24,-127, 
  /* [70][0][][] */ 41,31,37,-28,82,14,-91,-43,-127,-96,8,66,-35,68,-87,0, 
  /* [71][0][][] */ -29,-70,43,-59,76,-26,48,27,-91,92,-127,-87,-13,94,-36,52, 
  /* [72][0][][] */ 15,17,67,13,-70,-24,-115,-72,8,74,-40,74,39,126,-127,-15, 
  /* [73][0][][] */ 4,-38,-16,-34,37,-127,27,-54,82,101,113,-21,21,-36,-78,127, 
  /* [74][0][][] */ 4,11,-31,67,-81,-3,95,19,76,60,30,109,127,20,-60,11, 
  /* [75][0][][] */ -31,40,-24,41,-63,127,-23,17,-31,29,-50,43,-20,59,33,-76, 
  /* [76][0][][] */ -67,100,-42,30,-93,-7,-17,13,71,66,-58,-37,52,-49,-127,32, 
  /* [77][0][][] */ 127,127,-122,106,84,86,68,35,65,21,91,-43,91,38,70,12, 
  /* [78][0][][] */ 19,-35,4,-53,69,-127,25,-40,48,50,120,-27,-7,-27,-51,115, 
  /* [79][0][][] */ -38,67,2,19,2,-42,-33,-10,-127,-3,53,8,113,46,-94,-46, 
  /* [80][0][][] */ -88,37,108,20,92,47,-25,-127,-100,79,-67,-30,-8,-90,39,74, 
  /* [81][0][][] */ 73,83,-27,-3,27,-13,94,114,-127,123,-64,-49,-53,21,111,125, 
  /* [82][0][][] */ 50,127,-32,-78,-14,-38,115,-93,18,15,-56,75,109,-13,76,-33, 
  /* [83][0][][] */ -5,-22,14,24,4,26,-29,-113,70,-36,104,5,44,-45,-64,-127, 
  /* [84][0][][] */ -127,-82,-35,-18,-37,120,93,7,76,67,119,106,60,78,-81,6, 
  /* [85][0][][] */ 127,7,99,-81,60,-14,-10,77,28,112,-72,1,-34,51,111,-4, 
  /* [86][0][][] */ -87,67,-38,-2,26,94,24,14,91,35,127,-30,-26,58,-15,-17, 
  /* [87][0][][] */ 7,-53,21,-45,40,-127,35,-31,45,-16,65,-41,37,-41,-46,72, 
  /* [88][0][][] */ -87,65,51,-1,118,-22,32,12,-59,-70,98,-91,76,103,99,-127, 
  /* [89][0][][] */ -23,32,-15,36,-34,127,-26,41,-42,14,-33,27,-6,63,25,-101, 
  /* [90][0][][] */ 50,-78,24,16,127,-5,55,32,-13,-96,-121,-27,-17,10,-60,33, 
  /* [91][0][][] */ -29,66,-33,-42,7,-81,-82,33,-75,12,-127,-121,-81,-84,-22,22, 
  /* [92][0][][] */ 74,63,58,49,-127,-98,19,17,-41,65,-18,-29,-12,-85,42,-2, 
  /* [93][0][][] */ 11,-127,-108,77,-59,-49,-5,107,102,55,4,35,-67,21,-20,-31, 
  /* [94][0][][] */ 100,28,117,-18,15,-41,15,44,9,76,2,61,11,12,127,-11, 
  /* [95][0][][] */ -67,-38,8,-27,127,-13,40,65,-36,-15,-99,-45,24,0,-62,36, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0052446285262703896, 0.0022886553779244423, 0.0059129330329596996, 0.0034181775990873575, 0.0027403826825320721, 0.0012355751823633909, 0.0038409559056162834, 0.0033071713987737894, 0.0016757380217313766, 0.0030804018024355173, 0.00080145779065787792, 0.0027845024596899748, 0.0040193106979131699, 0.0091733606532216072, 0.0030735870823264122, 0.0025187029968947172, 0.0048098545521497726, 0.0023691968526691198, 0.0032796179875731468, 0.0013859154423698783, 0.0036888094618916512, 0.0015724098775535822, 0.0038130921311676502, 0.0028293551877140999, 0.0015517508145421743, 0.0034503911156207323, 0.0031308017205446959, 0.0042560542933642864, 0.0034638154320418835, 0.0045522581785917282, 0.0031348373740911484, 0.0021973971743136644, 0.0048973904922604561, 0.0015275104669854045, 0.0024435154628008604, 0.0035269903019070625, 0.0029613170772790909, 0.0038959020748734474, 0.0025551808066666126, 0.0042149396613240242, 0.001323105301707983, 0.0038793822750449181, 0.0033885382581502199, 0.0022458361927419901, 0.0023094101343303919, 0.0024706281255930662, 0.0022977828048169613, 0.0021695857867598534, 0.0045881737023591995, 0.0043232999742031097, 0.0043987180106341839, 0.00313207833096385, 0.0029533705674111843, 0.0021867565810680389, 0.0021325510460883379, 0.0063402401283383369, 0.0033933322411030531, 0.0011130491038784385, 0.0022845626808702946, 0.0035386821255087852, 0.0026183738373219967, 0.0015882281586527824, 0.0027642741333693266, 0.0044218767434358597, 0.0013350596418604255, 0.0014823587844148278, 0.0038914596661925316, 0.0026670997031033039, 0.002571185352280736, 0.0023095200303941965, 0.0042770719155669212, 0.0024733704049140215, 0.0020368995610624552, 0.0027717540506273508, 0.0047861663624644279, 0.0031365412287414074, 0.0041181128472089767, 0.0016430207761004567, 0.0031232123728841543, 0.0024433538783341646, 0.0027264484670013189, 0.0029842783696949482, 0.0025116875767707825, 0.00133443099912256, 0.0025330702774226665, 0.0012540782336145639, 0.0019672003109008074, 0.0037711337208747864, 0.0043686884455382824, 0.0034522542264312506, 0.0030529822688549757, 0.0017178815323859453, 0.0028907640371471643, 0.0030492609366774559, 0.0021070130169391632, 0.002422272926196456, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1208, 6862, 112, 2255, 5005, 15628, 307, 1949, 10816, -1481, 23987, 3388, 1676, 357, 3586, 462, 2283, 5424, -578, 13465, 1216, 10296, -1510, 2009, -10051, 1059, 3794, 1401, 5094, 1053, 4126, 5343, 1614, 11401, 4657, 3713, 4201, 2137, 4124, 1718, 15022, 1388, 2183, 2128, 3199, 6753, 6247, 7337, 1338, -1162, 2149, 4682, 3221, -3682, 7688, -47, 1992, 16817, 1528, 1861, 3320, 11194, 4655, -265, 14295, 11903, 2071, 4157, 5838, 4462, 2565, 1712, -5818, 4712, 1585, 4079, 269, 10307, 3717, 6864, 3139, 811, 3418, 14532, 490, 12419, 7211, 2119, -730, 3219, 1270, 10315, 4190, 2594, 5313, 5716, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00025437565636821091, 0.00011100466508651152, 0.00028678987291641533, 0.00016578890790697187, 0.00013291439972817898, 5.9928031987510622e-05, 0.00018629455007612705, 0.00016040485934354365, 8.1276870332658291e-05, 0.00014940605615265667, 3.8872411096235737e-05, 0.00013505430251825601, 0.00019494513981044292, 0.00044492754386737943, 0.00014907552395015955, 0.00012216246977914125, 0.00023328819952439517, 0.00011491109762573615, 0.00015906846965663135, 6.7219851189292967e-05, 0.00017891512834466994, 7.6265234383754432e-05, 0.00018494309915695339, 0.00013722975563723594, 7.5263225880917162e-05, 0.00016735133249312639, 0.00015185055963229388, 0.00020642770687118173, 0.00016800242883618921, 0.00022079423069953918, 0.00015204629744403064, 0.00010657844541128725, 0.00023753388086333871, 7.4087511165998876e-05, 0.00011851570889120921, 0.00017106655286625028, 0.00014363019727170467, 0.0001889595587272197, 0.00012393172073643655, 0.00020443355606403202, 6.4173429564107209e-05, 0.00018815831572283059, 0.00016435132420156151, 0.00010892784484894946, 0.00011201131565030664, 0.00011983072909060866, 0.0001114473634515889, 0.00010522953380132094, 0.00022253621136769652, 0.00020968927128706127, 0.00021334720076993108, 0.00015191247803159058, 0.00014324477524496615, 0.0001060623544617556, 0.00010343327448936179, 0.00030751517624594271, 0.00016458384925499558, 5.3985255362931639e-05, 0.00011080616241088137, 0.0001716336264507845, 0.00012699671788141131, 7.7032455010339618e-05, 0.00013407318328972906, 0.00021447044855449349, 6.4753236074466258e-05, 7.1897564339451492e-05, 0.00018874408851843327, 0.00012936002167407423, 0.00012470797810237855, 0.00011201664892723784, 0.00020744711218867451, 0.00011996374087175354, 9.8793971119448543e-05, 0.00013443597708828747, 0.00023213926760945469, 0.00015212893777061254, 0.00019973726011812687, 7.9690013080835342e-05, 0.00015148245438467711, 0.00011850787268485874, 0.00013223856512922794, 0.00014474386989604682, 0.00012182220234535635, 6.472274981206283e-05, 0.00012285930279176682, 6.0825466789538041e-05, 9.5413408416789025e-05, 0.00018290802836418152, 0.00021189069957472384, 0.00016744168533477932, 0.00014807615661993623, 8.3320919657126069e-05, 0.00014020821254234761, 0.00014789565466344357, 0.00010219462274108082, 0.00011748540418921039, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -48,-3,-2,-27,104,-13,24,-29,-2,3,-16,-27,-46,-8,9,-29,-21,6,-21,-19,-16,28,55,35,-15,-13,-40,-18,20,-1,27,6,-40,1,-48,-37,3,-59,-40,3,3,17,18,-29,-34,30,-66,-21,-43,3,-5,46,-38,11,31,-25,-17,-22,5,-18,-2,-19,-15,-56,-5,-21,-52,-11,1,30,-3,-3,28,3,-1,2,3,24,127,-13,-127,16,-124,-14,-39,-25,38,5,-28,-18,6,-19,-17,44,-42,14, -59,49,34,-80,-42,-1,127,-49,4,5,-47,11,-68,-1,-77,115,-20,65,65,-33,-7,127,85,110,18,-7,61,56,127,37,127,-34,-106,-15,-118,-50,-24,-113,127,-62,-22,-127,-10,-48,41,-39,-34,-11,54,16,29,127,-78,58,-84,-13,-89,-16,-9,21,-2,-127,-127,-47,-56,-2,-7,-99,-23,19,-64,99,-127,-34,0,-30,-110,-19,0,-87,-94,20,47,-56,106,79,-93,27,-127,3,58,-26,4,127,-19,-88, -40,1,-23,-14,56,3,37,-37,-10,12,-22,15,28,-6,0,-15,-10,-7,-42,-26,-5,3,18,30,-1,-7,10,-9,11,4,15,8,35,7,-16,47,-10,-71,-31,8,4,43,25,-9,-18,-30,-56,-44,10,-11,-5,27,-6,6,4,-6,60,-23,1,-22,-8,-6,-48,6,-28,-32,120,-33,-4,20,-18,6,13,1,0,9,2,87,-43,17,-80,8,-127,-20,-7,-38,3,-30,-16,-25,7,40,4,23,-29,9, 
  /* [0][1][][] */ -127,-5,9,-48,47,78,-34,-41,-3,-12,-30,-9,-104,26,11,60,-16,35,93,15,43,-17,105,-33,55,29,63,10,-11,1,-7,-25,-127,-15,32,-7,-13,-127,-62,-127,-21,-9,91,-14,-77,127,-101,-47,87,90,8,-40,-103,76,63,-35,59,-40,39,-31,14,-7,61,-100,-28,16,-30,-107,-18,-5,-127,12,59,127,6,-64,-127,-62,-54,-32,-41,-3,-68,-72,36,33,-91,42,-46,127,104,-87,127,-4,-58,-3, 79,127,127,127,-127,-127,106,-70,127,127,-72,-56,-90,127,-35,127,127,-127,121,127,127,-81,127,-127,-127,-127,127,127,-110,127,-31,127,-11,127,127,-90,127,84,-9,-4,127,-7,-127,-101,127,-30,127,127,127,-127,127,-123,107,127,-127,127,-93,127,-127,127,-102,121,88,-127,127,127,-19,127,-86,-127,-26,-127,16,109,127,63,-2,-127,82,-127,29,127,84,127,127,79,-127,127,-19,54,-11,-24,-100,-37,-127,-28, -119,-22,20,-65,10,51,-57,-10,-41,-6,1,127,-127,32,20,61,-20,36,40,8,22,-24,44,-30,55,9,34,7,-10,-9,7,-21,-97,-28,75,127,-10,-102,-74,-119,-31,-51,42,-25,-67,-57,-96,-98,16,72,-7,-22,127,0,83,-37,127,-34,53,-64,2,-31,-117,-48,-62,-8,-53,-123,-15,0,-79,-6,35,-103,-9,127,-117,-51,-59,-7,-75,-21,-91,-84,-1,33,-90,29,-27,-63,127,127,-54,-34,-61,2, 
  /* [0][2][][] */ -27,-31,26,-6,45,0,-16,20,-8,12,30,-22,68,-23,-19,-46,-7,-11,-89,-28,-23,-6,21,-27,9,-2,-18,-9,-11,2,-9,-1,92,-1,-7,-20,-7,2,-11,-24,-40,6,30,8,36,7,-67,9,-31,14,-30,-20,-10,3,23,-24,9,-25,12,-34,0,11,-11,5,-25,-30,127,28,23,15,37,2,-12,-20,-12,-26,-14,86,-29,-3,0,16,-71,-26,1,-6,60,-19,35,3,-20,-20,-9,-17,-35,-13, -40,-39,44,-83,-46,-2,41,127,-53,102,127,-24,-51,11,127,105,-15,-37,127,-55,-36,-30,94,8,32,-22,59,14,-18,1,-115,-48,-11,-28,-109,-4,-106,-119,55,-93,-35,-105,-31,127,25,-34,-65,32,25,5,-11,-2,62,52,-51,-40,-47,-52,48,-62,127,23,92,-10,-82,-41,-37,-52,127,31,-16,13,31,-28,-4,-30,-19,-12,2,45,-80,-17,-84,-104,66,-127,2,8,-14,3,45,-3,15,-125,-88,127, -45,8,7,7,19,-8,-1,-6,-21,2,18,44,73,-2,1,-19,-3,0,-11,-38,-8,4,-7,-34,4,-13,-27,-18,-15,2,-36,6,76,5,5,13,-9,-18,-41,-27,-34,26,28,7,23,-9,-69,1,-43,12,-7,-15,22,-12,30,-24,60,-15,16,-23,3,20,-9,-2,-19,-20,-22,39,33,13,5,-15,-45,-54,-6,-2,-28,8,77,6,-53,4,-51,-8,-35,-6,57,-2,33,10,-19,7,7,-38,-21,-8, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.004931032657623291, 0.011311993002891541, 0.0082354387268424034, 0.0081504285335540771, 0.0084526510909199715, 0.022521788254380226, 0.005840696394443512, 0.0085403090342879295, 0.014414960518479347, 0.012924951501190662, 0.010418866761028767, 0.0102657750248909, 0.0048342482186853886, 0.0086825331673026085, 0.0098244119435548782, 0.0073590073734521866, 0.010381856933236122, 0.012641140259802341, 0.0071061654016375542, 0.012833720073103905, 0.010536879301071167, 0.0093548540025949478, 0.0054612290114164352, 0.0064102867618203163, 0.10552942752838135, 0.0097212009131908417, 0.009301038458943367, 0.0084413429722189903, 0.011689650826156139, 0.0090818284079432487, 0.006512240506708622, 0.013315084390342236, 0.0046901502646505833, 0.018386419862508774, 0.0057991794310510159, 0.0087621835991740227, 0.01029408723115921, 0.0050650658085942268, 0.006968596950173378, 0.0050703971646726131, 0.017412977293133736, 0.010150108486413956, 0.01307249628007412, 0.0065437061712145805, 0.0067965495400130749, 0.012506617233157158, 0.0059819244779646397, 0.013052851893007755, 0.0081710247322916985, 0.019727109000086784, 0.011304882355034351, 0.0075597013346850872, 0.0073075308464467525, 0.010892080143094063, 0.010518515482544899, 0.010565174743533134, 0.0054521765559911728, 0.015122571960091591, 0.017604019492864609, 0.008486027829349041, 0.008119688369333744, 0.011510057374835014, 0.0065041366033256054, 0.0061056064441800117, 0.014673430472612381, 0.015674754977226257, 0.0041225492022931576, 0.0043047796934843063, 0.0087349899113178253, 0.014153948053717613, 0.0084756296128034592, 0.01115125697106123, 0.024267390370368958, 0.0080903228372335434, 0.0085995672270655632, 0.01065509207546711, 0.0038004738744348288, 0.0079821860417723656, 0.006765065249055624, 0.0081450855359435081, 0.0058007021434605122, 0.011056620627641678, 0.00479857437312603, 0.011306189000606537, 0.005313544999808073, 0.010574769228696823, 0.0055460347793996334, 0.013034040108323097, 0.0096067935228347778, 0.010492065921425819, 0.0054256445728242397, 0.011222913861274719, 0.011474239639937878, 0.0065684942528605461, 0.0039138109423220158, 0.011379588395357132, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 11619, -2612, -5464, 6439, 99, 1526, -473, 1418, 1468, -4152, 1186, -2967, 8620, -2575, -1955, -8066, 803, 1273, -7755, 635, -2333, -688, -6971, 1382, 3, 7123, -10524, -3816, -164, -3504, 725, -448, 9014, -432, 1470, -384, 1069, 11933, 3108, 11966, 353, 4872, -1096, 5569, 1160, 960, 13095, 107, -5587, -731, -3372, 93, -2631, -4719, 366, 3169, -1820, 4759, -288, 3396, -1674, 39, 1276, 8107, 7278, -964, 17858, 13386, -2241, -495, 7974, -465, 75, 2770, -2441, 145, 17223, 3327, 8663, 8160, 12084, -2186, 9374, 11709, -1787, -1155, 9359, -5173, 5283, -1391, -8592, -558, 566, 2371, 20804, -1592, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00010817853035405278, 0.00024816603399813175, 0.00018067161727230996, 0.00017880662926472723, 0.00018543688929639757, 0.00049408996710553765, 0.00012813501234631985, 0.0001873599539976567, 0.00031623989343643188, 0.0002835516061168164, 0.00022857234580442309, 0.00022521376376971602, 0.00010605523857520893, 0.00019048011745326221, 0.00021553100668825209, 0.00016144418623298407, 0.00022776040714234114, 0.00027732527814805508, 0.00015589727263431996, 0.00028155013569630682, 0.00023116133525036275, 0.00020522969134617597, 0.00011981013813056052, 0.0001406308583682403, 0.0023151373025029898, 0.00021326672867871821, 0.00020404907991178334, 0.00018518880824558437, 0.00025645119603723288, 0.00019923997751902789, 0.00014286756049841642, 0.00029211046057753265, 0.0001028939732350409, 0.00040336698293685913, 0.00012722420797217637, 0.0001922275114338845, 0.00022583488316740841, 0.00011111899220850319, 0.00015287924907170236, 0.00011123594595119357, 0.00038201131974346936, 0.00022267622989602387, 0.00028678847593255341, 0.00014355785970110446, 0.00014910481695551425, 0.00027437406242825091, 0.00013123331882525235, 0.00028635753551498055, 0.00017925848078448325, 0.0004327794595155865, 0.00024801003746688366, 0.00016584707191213965, 0.00016031488485168666, 0.00023895384219940752, 0.00023075846547726542, 0.00023178209085017443, 0.00011961154814343899, 0.00033176367287524045, 0.00038620244595222175, 0.00018616911256685853, 0.00017813224985729903, 0.00025251120678149164, 0.00014268976519815624, 0.00013394669804256409, 0.00032191028003580868, 0.00034387764753773808, 9.0441768406890333e-05, 9.4439594249706715e-05, 0.00019163092656526715, 0.00031051371479406953, 0.00018594099674373865, 0.00024463975569233298, 0.00053238554392009974, 0.000177488022018224, 0.00018865997844841331, 0.00023375471937470138, 8.3375976828392595e-05, 0.00017511568148620427, 0.00014841411029919982, 0.00017868941358756274, 0.00012725760461762547, 0.00024256357573904097, 0.00010527261474635452, 0.00024803867563605309, 0.00011657020513666794, 0.00023199256975203753, 0.00012167063687229529, 0.00028594481409527361, 0.00021075682889204472, 0.00023017820785753429, 0.00011902947881026193, 0.000246211769990623, 0.00025172543246299028, 0.00014410166477318853, 8.5862404375802726e-05, 0.0002496489614713937, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 33,30,2,12,-20,-79,-8,5,-27,-88,12,1,55,-70,63,38,-91,-36,39,9,74,24,-76,9,-4,72,123,69,13,82,66,-44,-1,-3,0,-18,30,10,-7,-3,127,15,41,-31,-10,-10,7,-40,35,-47,100,1,-73,-3,46,13,-10,-46,8,29,-1,45,-80,-11,20,-10,53,25,-5,-22,21,29,7,42,-19,30,59,-29,56,24,-32,40,31,33,-67,1,-6,78,12,5,-91,-18,21,14,113,80, 
  /* [1][0][][] */ 23,48,-61,-10,-7,-47,100,-100,-63,-39,-70,-50,2,-40,-14,-61,-33,-21,-30,-17,-3,-99,115,-38,-8,19,7,70,-52,3,-43,22,-36,28,20,3,-16,55,-56,85,26,19,-18,-55,61,-57,-14,31,-89,-8,41,-112,-46,41,62,71,31,19,-61,11,-31,-5,-8,-21,29,34,96,16,-38,-127,15,-3,19,65,-15,38,-59,-34,104,-34,54,-5,60,-69,-26,-69,-23,10,-24,-42,37,0,70,-67,-33,47, 
  /* [2][0][][] */ 8,-13,9,-17,65,38,-51,43,-54,25,13,-26,27,-10,16,32,23,-21,-127,-1,-23,-35,-11,25,7,1,-44,5,-27,-12,-5,61,-19,-39,-8,15,-39,12,-22,-19,64,-7,19,34,11,51,4,1,-75,14,-17,17,-21,44,15,-74,28,17,44,32,-17,-3,-21,53,39,-1,-37,-14,-11,0,-21,-32,17,41,19,68,-48,-15,-12,-30,19,39,35,-15,-5,-46,-11,-45,-21,-32,-5,67,-1,8,74,-19, 
  /* [3][0][][] */ 38,-33,-14,-121,-5,-32,105,-21,22,100,-69,-4,11,-10,-14,58,42,41,-30,22,-60,4,18,2,-45,101,36,-8,-42,-11,-66,61,3,-23,29,-19,4,-54,-27,49,14,6,0,15,62,-50,-1,40,33,-20,19,-47,100,37,34,-6,3,-17,-13,-31,-26,51,65,-2,-24,-21,118,-44,-32,-17,-52,29,14,-60,-9,-71,21,-49,127,5,-33,-33,-31,-47,-28,-36,68,70,-48,49,-59,5,7,-75,-23,48, 
  /* [4][0][][] */ -27,86,38,18,-24,12,-45,-25,14,-37,2,-4,25,42,-29,14,-15,-37,-32,-74,39,-32,-79,36,-35,-26,-25,27,-44,127,-49,-14,5,-40,1,-36,80,42,-31,-1,16,4,13,-45,-51,-1,64,-4,22,-21,-59,-8,-67,19,54,28,0,56,-19,21,-19,-65,-23,-5,60,32,-79,-15,-2,5,20,-76,-17,65,60,68,-40,12,-73,35,5,77,28,-71,47,-82,-43,-78,-45,-47,-58,-25,8,11,38,-29, 
  /* [5][0][][] */ -9,-13,32,-17,-9,-19,-12,-4,38,10,-7,-9,-18,-28,18,-19,-26,5,-52,-45,-18,19,-10,13,22,-59,51,-24,-3,35,16,76,-3,-72,23,10,-33,-40,-30,3,-47,-2,-24,12,-4,21,-74,18,-25,22,48,-8,29,-65,4,19,-17,-50,11,-32,44,22,22,45,-36,9,107,-17,-1,-24,3,14,4,35,39,0,-8,-7,127,30,-21,-11,-31,30,36,70,17,99,4,-43,-10,8,7,-27,-39,16, 
  /* [6][0][][] */ 21,-67,68,15,-38,114,-62,-110,-29,-67,-83,61,9,8,-33,98,5,38,15,-46,-95,-18,-81,-66,6,-62,-14,69,-127,52,-17,-36,52,87,-15,-1,-6,-38,15,-17,-63,33,32,-25,17,49,-102,3,57,20,-86,-117,89,13,-34,-25,32,-26,23,-20,-27,-53,46,5,59,-81,-64,-65,-87,11,-16,-88,-27,-110,19,-114,98,14,-79,51,-23,87,25,-107,65,-39,-12,-11,-68,90,-81,81,48,-58,67,-100, 
  /* [7][0][][] */ 1,-13,-84,54,-27,-1,37,16,-100,-19,77,53,2,-62,-5,-28,-10,-12,1,11,-55,-13,-36,-40,66,47,-15,62,3,36,24,27,-52,-127,23,107,-1,9,-39,5,-3,-26,27,-77,28,60,69,95,-39,62,-28,7,20,-39,44,-70,-15,36,-75,-14,57,14,4,-32,77,-49,90,-25,-64,-25,69,2,-16,-29,-82,-18,33,-37,92,-30,-10,-9,-78,-24,42,19,-69,36,-10,13,9,31,57,-11,81,6, 
  /* [8][0][][] */ -9,-57,11,7,-16,-3,22,2,-10,-8,43,40,24,30,-44,-11,72,2,13,1,-8,-76,-37,-22,-24,-33,69,7,-18,40,3,-28,-16,1,2,-2,-43,-15,20,-28,-6,47,28,-41,15,-23,23,-18,32,-7,45,1,-3,7,-45,9,-15,104,-56,-5,-12,-63,-59,-9,-87,-33,-24,23,-11,13,42,-16,-31,-127,41,-100,8,16,-52,16,-25,-11,4,62,65,-63,-43,54,-30,81,13,-15,-52,3,0,-63, 
  /* [9][0][][] */ -21,-37,-31,27,0,21,3,43,-40,-1,54,63,-28,52,20,-49,-10,34,-36,-39,3,38,-12,9,-29,30,12,16,36,-2,17,-4,-20,-19,5,50,-21,-14,26,-2,-14,-35,11,-3,14,42,0,44,-46,10,-5,30,111,16,-14,2,11,-18,43,14,-31,2,82,6,10,23,55,3,28,0,-17,21,3,-127,-35,-112,-34,-18,33,-7,-7,33,-1,-42,48,3,-58,-7,-6,114,37,32,46,35,-9,29, 
  /* [10][0][][] */ 23,38,9,2,-23,17,-38,-35,67,8,-37,15,20,13,-4,-55,-30,2,20,-2,25,-15,-19,-37,13,-18,-85,45,-17,46,-9,14,18,26,-11,-1,11,12,4,-3,37,-7,48,-44,-27,-10,14,21,14,3,10,-25,-24,-13,-5,35,-14,5,-7,-8,-18,-40,-12,9,-6,-13,-88,-25,-43,-14,45,-12,-20,28,33,25,48,-20,-93,10,-2,30,8,-7,10,7,-71,-127,-21,22,14,24,45,-30,20,24, 
  /* [11][0][][] */ 10,-38,7,12,-70,33,20,-4,76,-17,-23,-50,31,16,23,-17,-29,48,23,-79,11,29,14,-27,36,15,63,6,34,-62,-33,14,17,115,-104,2,25,-1,55,8,-51,61,-24,11,-42,2,-12,-11,48,-22,-28,-17,-25,16,-76,97,-28,1,1,-26,21,-1,-10,-71,-9,-35,-127,-73,1,-38,-90,33,49,22,-7,-6,33,55,-109,-41,5,-3,-8,4,-18,-6,57,90,20,-52,9,11,-42,30,87,24, 
  /* [12][0][][] */ 24,26,-38,-29,19,-25,-4,47,51,-43,18,3,-6,-15,-5,14,14,-44,-28,17,-2,51,4,41,-47,-34,-127,-17,71,-19,29,-2,-22,-74,59,-6,25,-19,-7,19,4,-65,33,32,39,0,32,9,-65,3,-33,93,51,-21,36,-77,11,25,-44,-28,2,54,70,9,-8,-17,30,23,98,23,33,28,1,-4,-25,-7,-33,-54,46,-57,8,-51,27,-31,4,5,7,-97,-20,32,-36,27,11,67,12,44, 
  /* [13][0][][] */ -17,16,-72,33,27,15,-15,2,26,67,-29,49,-53,-35,57,-50,12,49,51,20,-33,-38,1,11,46,48,-14,19,8,36,54,-13,-10,58,1,54,9,-32,-50,-52,8,-30,36,17,45,40,-30,56,-48,51,4,5,-21,-37,57,23,23,-41,-15,-13,19,25,3,-18,19,87,126,35,25,0,-57,-5,46,52,-85,69,20,-89,127,-41,-5,-34,21,8,29,63,-32,-30,-15,-19,6,47,39,12,60,53, 
  /* [14][0][][] */ -6,47,12,18,-50,-45,26,52,-79,-37,73,23,-84,-11,72,-16,-37,32,-61,27,-37,26,-93,15,-49,0,-56,-119,11,6,32,73,-58,23,3,-11,-41,-70,-11,-39,32,-50,76,-21,-13,46,-68,35,-14,-37,89,29,-13,28,-28,21,-57,35,-6,43,25,51,-13,46,19,-55,4,-74,29,55,51,32,-48,45,5,12,31,-12,41,19,-78,92,4,-114,80,-1,0,3,-127,-15,-20,6,-27,19,38,40, 
  /* [15][0][][] */ 54,-31,32,30,48,8,-7,-32,20,38,-53,-23,61,71,6,-16,-13,6,-63,32,17,-25,35,29,78,-48,88,34,39,-37,-43,60,75,51,2,-80,66,65,60,53,82,61,-38,9,-44,-127,23,-43,-16,-21,-28,-4,1,-35,-33,66,-18,-3,-5,13,5,-59,-33,34,32,30,-61,40,-9,-41,-19,-5,10,-116,-33,-100,-13,20,-118,31,99,-31,40,14,-53,3,-3,1,31,84,11,-77,-26,-35,26,-43, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0029035520274192095, 0.0023517063818871975, 0.0036198876332491636, 0.0029202001169323921, 0.0034205697011202574, 0.005659736692905426, 0.0022553731687366962, 0.0027544158510863781, 0.0045936079695820808, 0.0042735273018479347, 0.0037463395856320858, 0.0030993975233286619, 0.0043495940044522285, 0.0047595114447176456, 0.0037105933297425508, 0.0040141786448657513, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -26290, -3118, 3008, -14114, 16326, -13133, 25060, -9081, 12476, -8663, 13991, 9792, -4269, -32148, 973, 4801, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 6.5813008404802531e-05, 5.3304665925679728e-05, 8.2049744378309697e-05, 6.6190361394546926e-05, 7.7531927672680467e-05, 0.00012828572653234005, 5.1121140131726861e-05, 6.2432627601083368e-05, 0.00010412045230623335, 9.6865383966360241e-05, 8.4915947809349746e-05, 7.0252113800961524e-05, 9.8589538538362831e-05, 0.00010788088547997177, 8.4105711721349508e-05, 9.0986890427302569e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -87,40,-20,-26,-19,-60,-55,-39,76,-53,57,-45,91,-127,15,-119, 
  /* [1][0][][] */ -101,81,-112,-124,-80,13,-7,60,-56,-27,101,-79,57,127,13,52, 
  /* [2][0][][] */ -51,-5,-63,9,-33,-58,25,-32,-85,127,85,-6,27,32,-27,116, 
  /* [3][0][][] */ -47,-64,4,-50,-77,20,-44,-107,-10,8,39,-63,-60,-32,-127,-34, 
  /* [4][0][][] */ 76,13,-23,49,-63,-1,-127,33,28,73,21,67,-2,-2,-54,-87, 
  /* [5][0][][] */ -87,73,-88,-32,53,-52,-14,-79,92,-33,12,-43,11,-117,-127,-84, 
  /* [6][0][][] */ 0,-33,-39,23,-92,90,22,-56,-41,-54,123,-27,-13,-1,-127,9, 
  /* [7][0][][] */ -28,127,123,-77,78,107,13,-54,31,82,-95,-11,51,-3,11,59, 
  /* [8][0][][] */ -47,-6,29,-4,53,4,87,127,-67,-18,-48,-84,29,81,-67,-54, 
  /* [9][0][][] */ 81,72,123,23,-112,-30,-113,-127,87,9,127,31,-35,-123,69,-49, 
  /* [10][0][][] */ 5,-121,11,-82,-127,63,22,3,-29,-41,-23,40,-1,43,-105,7, 
  /* [11][0][][] */ 114,-57,-9,81,-98,-36,49,-7,127,98,-36,42,19,-66,-17,95, 
  /* [12][0][][] */ -79,-77,127,-14,73,-14,31,63,54,-36,109,81,-38,20,-112,20, 
  /* [13][0][][] */ -8,-32,26,31,28,3,127,48,-107,21,16,12,-17,121,90,-80, 
  /* [14][0][][] */ 104,-61,127,7,69,59,114,64,107,82,87,38,71,-42,28,-41, 
  /* [15][0][][] */ -21,120,11,-52,27,101,-71,85,-48,-40,-43,-10,-46,127,-24,-35, 
  /* [16][0][][] */ -55,62,125,-48,29,84,-1,-17,-8,22,-20,48,99,5,100,127, 
  /* [17][0][][] */ 15,107,70,-127,19,-34,11,-81,-58,74,-22,58,-52,-19,89,-52, 
  /* [18][0][][] */ -64,16,-61,-81,106,58,-38,-66,33,69,97,61,-3,127,-38,-11, 
  /* [19][0][][] */ 41,127,69,59,52,-23,11,-6,-32,101,39,93,40,52,-50,35, 
  /* [20][0][][] */ 93,-12,1,76,-62,-10,-33,54,-36,-46,-127,-35,95,-39,29,-12, 
  /* [21][0][][] */ -91,-82,-29,125,-19,4,-127,67,15,10,31,28,-49,41,-76,9, 
  /* [22][0][][] */ 8,5,-59,-39,127,-6,-26,58,69,79,33,57,-26,22,-11,26, 
  /* [23][0][][] */ -66,19,-15,10,4,45,95,75,-11,127,-24,-29,-10,17,-41,-27, 
  /* [24][0][][] */ 21,-77,32,3,127,31,68,-23,47,20,41,23,-61,16,-11,-16, 
  /* [25][0][][] */ 127,-60,99,9,-1,-24,-51,120,115,3,-59,-6,116,-52,124,67, 
  /* [26][0][][] */ 54,32,82,54,48,-4,-54,-14,3,65,23,127,18,-49,4,-16, 
  /* [27][0][][] */ -46,51,-69,3,-34,95,24,-106,17,-79,112,33,30,-43,127,120, 
  /* [28][0][][] */ -52,32,-75,-127,28,-91,25,-58,-97,106,-67,36,-19,15,-42,100, 
  /* [29][0][][] */ 127,117,-97,34,58,84,-49,-41,21,50,-6,92,-123,18,-35,78, 
  /* [30][0][][] */ -36,104,-110,-67,87,-32,14,46,-77,55,-78,-19,15,108,-4,127, 
  /* [31][0][][] */ 29,-100,82,22,68,-50,-82,32,-13,15,17,-36,-70,42,31,127, 
  /* [32][0][][] */ -40,60,-12,46,-103,71,2,65,10,-127,29,-70,32,42,43,43, 
  /* [33][0][][] */ -73,-4,66,87,-1,23,-57,1,-49,-60,30,-11,-20,4,12,127, 
  /* [34][0][][] */ -9,16,-88,-78,48,-10,-1,50,16,-10,-1,-9,-57,-26,-44,127, 
  /* [35][0][][] */ 86,-14,25,-3,1,17,-79,-27,-14,-127,-63,11,-1,-36,53,-31, 
  /* [36][0][][] */ 1,26,-112,-7,20,127,-12,43,-30,9,60,32,2,13,-57,41, 
  /* [37][0][][] */ 55,46,56,-64,53,-127,49,-27,-105,66,-73,-16,2,32,89,31, 
  /* [38][0][][] */ -44,127,36,-53,38,15,74,-87,2,-4,-110,31,-40,-95,-93,22, 
  /* [39][0][][] */ 81,36,-108,-108,-12,-29,-13,-66,13,-6,-2,-24,37,-4,-127,-70, 
  /* [40][0][][] */ -32,25,-66,-83,-48,-15,20,-127,-9,-11,2,-35,40,70,42,58, 
  /* [41][0][][] */ -42,-79,-13,127,5,-28,-59,-10,-4,-44,68,-55,-61,-5,6,29, 
  /* [42][0][][] */ -19,66,-24,-127,16,17,13,-22,72,-11,-4,8,73,-35,-30,11, 
  /* [43][0][][] */ -4,39,0,29,109,20,10,13,2,48,5,-77,-127,-46,12,-18, 
  /* [44][0][][] */ 92,-29,23,42,-24,-17,6,26,29,-36,12,11,127,-17,-47,-42, 
  /* [45][0][][] */ -1,-97,-64,43,-40,-89,1,52,36,-20,12,33,-90,127,27,-40, 
  /* [46][0][][] */ -16,-66,30,69,-5,1,-79,46,23,-38,45,-16,16,63,72,127, 
  /* [47][0][][] */ -33,-44,19,66,12,-17,55,13,6,-52,-127,-36,54,-22,-58,5, 
  /* [48][0][][] */ -83,105,-19,-15,25,59,-5,-113,39,-3,28,-72,72,-127,-52,-4, 
  /* [49][0][][] */ -54,6,47,-37,4,-3,127,118,-35,-24,-14,12,-38,29,-49,31, 
  /* [50][0][][] */ 48,23,-88,41,45,-127,-36,-2,-66,66,-32,1,3,-75,-109,-50, 
  /* [51][0][][] */ -47,52,-32,113,-14,45,-46,-64,-38,-74,13,-50,-10,25,-27,127, 
  /* [52][0][][] */ -113,17,24,-6,29,47,56,-1,-4,-86,-47,-24,-98,-55,-127,-11, 
  /* [53][0][][] */ -28,-62,-43,-127,-25,-16,6,78,26,-71,-55,33,-1,26,54,82, 
  /* [54][0][][] */ 4,-55,1,7,-54,55,51,-14,-13,-79,55,29,-26,-7,-127,33, 
  /* [55][0][][] */ -13,-30,-35,46,66,-26,59,88,-56,-54,-127,-35,71,-25,-26,37, 
  /* [56][0][][] */ 90,-21,-61,-21,-127,36,-118,-8,2,-5,-46,12,120,-33,53,10, 
  /* [57][0][][] */ -50,4,5,-18,127,52,41,35,-32,50,-8,3,-43,64,-119,-27, 
  /* [58][0][][] */ 28,13,-17,-21,59,-23,-49,-72,54,-127,-68,7,-102,-51,-29,85, 
  /* [59][0][][] */ -57,-29,-2,14,6,72,-117,-57,97,127,-75,12,-25,-3,-8,-1, 
  /* [60][0][][] */ 11,-60,-12,11,-127,-56,32,16,13,53,-10,45,9,-20,37,49, 
  /* [61][0][][] */ 18,40,-92,-21,-40,-19,-127,-87,-19,2,50,118,56,-51,79,58, 
  /* [62][0][][] */ 68,-9,42,-20,-3,36,42,124,-80,127,23,112,55,40,40,106, 
  /* [63][0][][] */ 34,-127,-9,-12,-80,21,33,-36,-18,-25,-3,-14,-28,117,100,35, 
  /* [64][0][][] */ -49,-24,-127,-28,36,28,19,8,13,-110,52,-7,102,-26,-94,78, 
  /* [65][0][][] */ -20,-2,61,65,97,-15,89,77,-40,-8,-127,-73,24,108,-86,-12, 
  /* [66][0][][] */ -50,-127,-5,-93,-62,-95,45,-33,-1,-68,10,71,-56,-43,-79,84, 
  /* [67][0][][] */ -55,-86,-113,-27,-52,102,13,-127,-53,-14,-40,-88,13,-18,-77,52, 
  /* [68][0][][] */ 127,29,13,-29,-63,5,-61,-44,-73,-103,-33,-3,51,-11,60,-59, 
  /* [69][0][][] */ 33,5,20,0,-17,-52,-55,37,-5,127,-8,16,-20,45,80,-14, 
  /* [70][0][][] */ 49,-16,-32,89,-127,42,-28,-103,99,110,38,77,55,-51,-25,25, 
  /* [71][0][][] */ 127,-48,71,77,-72,-32,23,-21,85,12,-56,43,60,-50,26,-12, 
  /* [72][0][][] */ -7,-34,44,107,60,6,-127,86,87,-16,45,10,-55,-72,-78,87, 
  /* [73][0][][] */ 43,8,52,-104,58,-87,-55,56,-7,127,-38,24,23,-119,35,-26, 
  /* [74][0][][] */ 83,1,27,50,-127,-22,28,-8,-80,-44,17,-43,25,-59,11,16, 
  /* [75][0][][] */ 73,127,-108,15,63,53,-15,-39,-25,-26,54,79,-107,61,49,84, 
  /* [76][0][][] */ -58,-34,-5,-32,-53,2,66,-2,-64,26,86,44,-68,-127,-27,90, 
  /* [77][0][][] */ -51,127,-25,15,-49,-76,46,81,51,-56,-17,45,-22,52,-16,81, 
  /* [78][0][][] */ 120,33,-73,58,-68,17,-111,-28,-12,-15,-72,10,24,-127,24,72, 
  /* [79][0][][] */ -70,-48,127,75,-42,-116,-67,-64,-16,31,25,21,-95,127,-52,97, 
  /* [80][0][][] */ 70,81,27,-127,-9,30,73,-20,21,29,-44,24,87,-68,-21,-12, 
  /* [81][0][][] */ 47,-71,36,-127,113,59,-3,122,114,36,-31,-53,9,11,-98,-65, 
  /* [82][0][][] */ 81,48,55,14,127,-88,31,36,-8,102,-27,22,-18,-31,27,-96, 
  /* [83][0][][] */ -61,82,16,10,75,88,127,118,1,87,-25,-62,-105,76,-34,-104, 
  /* [84][0][][] */ 16,-93,-27,109,9,-77,-62,41,-77,52,-79,-25,-127,63,-30,-68, 
  /* [85][0][][] */ -98,78,-47,-10,-23,-39,-42,-45,-33,39,13,-65,-127,-86,-94,52, 
  /* [86][0][][] */ -41,80,109,127,46,-27,57,53,-4,47,-38,-99,33,96,-127,-60, 
  /* [87][0][][] */ -22,62,127,-33,-108,-25,26,15,26,-33,11,39,-47,29,-20,0, 
  /* [88][0][][] */ -23,-60,-109,38,43,38,-12,30,-22,-70,-111,-97,127,-16,23,36, 
  /* [89][0][][] */ 17,43,7,-127,-4,-65,-56,48,124,-27,51,-109,-26,-33,57,-80, 
  /* [90][0][][] */ -6,73,20,11,-24,46,48,116,8,-63,-17,127,61,10,-51,84, 
  /* [91][0][][] */ -63,4,-41,57,93,50,-32,-115,-54,26,-4,35,-106,-127,-72,-10, 
  /* [92][0][][] */ -30,80,-3,-14,-127,4,-88,62,-60,57,97,71,-13,-7,53,8, 
  /* [93][0][][] */ 91,61,85,48,-127,-61,9,21,-9,-43,-30,-55,27,-42,-12,3, 
  /* [94][0][][] */ -37,-127,21,-117,12,39,-18,7,72,-28,8,56,7,74,-49,50, 
  /* [95][0][][] */ -21,-52,-23,-59,109,80,-42,28,78,51,-85,77,-32,127,-65,37, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0017341402126476169, 0.0013941772049292922, 0.0022603396791964769, 0.0029953389894217253, 0.001823060680180788, 0.0016768412897363305, 0.0013510729186236858, 0.0020901798270642757, 0.0022549917921423912, 0.0011162296868860722, 0.0032389871776103973, 0.001760267186909914, 0.0019180390518158674, 0.0022361562587320805, 0.0026284977793693542, 0.0022871587425470352, 0.0020997931715101004, 0.0014055585488677025, 0.0018965571653097868, 0.0027666119858622551, 0.0017738423775881529, 0.0010001530172303319, 0.0016363435424864292, 0.0026248497888445854, 0.0029478978831321001, 0.0016776610864326358, 0.001368839293718338, 0.001672798884101212, 0.0021357417572289705, 0.0018063661409541965, 0.0010573844192549586, 0.0032847260590642691, 0.0011422329116612673, 0.0025999026838690042, 0.002058990066871047, 0.0017445705598220229, 0.0023809461854398251, 0.0014078059466555715, 0.002329166978597641, 0.0023354631848633289, 0.0028486489318311214, 0.0028368353378027678, 0.0038756437133997679, 0.0038851408753544092, 0.0030745803378522396, 0.0025304260198026896, 0.0024261670187115669, 0.002304852707311511, 0.0024966578930616379, 0.0022192422766238451, 0.0019327295012772083, 0.0023211189545691013, 0.0023254388943314552, 0.0034539294429123402, 0.002679609227925539, 0.0022795381955802441, 0.0021253761369735003, 0.0022091499995440245, 0.0014920254470780492, 0.0020064318086951971, 0.0033185977954417467, 0.0017484063282608986, 0.0017945027211681008, 0.0026650286745280027, 0.0018526853527873755, 0.0014062767149880528, 0.0018380352994427085, 0.0031339840497821569, 0.0016804499318823218, 0.0027694017626345158, 0.0014887881698086858, 0.0020194260869175196, 0.0021915435791015625, 0.0017027260037139058, 0.0022336447145789862, 0.0014802463119849563, 0.0021211199928075075, 0.0020487329456955194, 0.0019785657059401274, 0.0019519616616889834, 0.0022377090062946081, 0.0017779626650735736, 0.0016250930493697524, 0.0020797124598175287, 0.0025006553623825312, 0.001968329306691885, 0.0021813192870467901, 0.0030160164460539818, 0.00095342739950865507, 0.0028546389658004045, 0.0030458951368927956, 0.0024606040678918362, 0.0010054589947685599, 0.0021604886278510094, 0.0032028702553361654, 0.0020647263154387474, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 7309, 4794, 1454, -1109, 6670, 7317, 10078, 2366, -410, 11554, 742, -4846, 4607, 3875, 116, -438, 4792, 9217, -618, 155, 5587, 14824, 8634, -1926, -3190, -1201, 11373, 98, 1854, 1160, 13591, -1362, 12780, 3038, 5275, -6275, 1012, -8049, 56, 2645, 2812, 1429, 1296, -312, 1320, 2629, 3951, 4112, 4305, 3880, 6028, 2890, -2845, 1635, 1551, 3032, 2754, 2764, 9029, 1805, -991, 6912, 6349, 4120, 5350, 8738, -5700, 1992, 6041, -988, 7880, 1819, 3376, 4341, 4573, 3160, -1194, 2765, 3278, 4876, 3224, 3768, 7760, 919, 2088, 5901, 938, -1675, 16981, -718, 577, -1656, 15256, 3581, -9, -1259, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00010155679046874866, 8.1647471233736724e-05, 0.00013237271923571825, 0.00017541661509312689, 0.00010676425881683826, 9.8201184300705791e-05, 7.9123150499071926e-05, 0.00012240761134307832, 0.00013205951836425811, 6.5369975345674902e-05, 0.0001896854373626411, 0.00010308687342330813, 0.00011232649558223784, 0.00013095645408611745, 0.00015393322973977774, 0.00013394332199823111, 0.00012297059583943337, 8.2313999882899225e-05, 0.00011106844613095745, 0.00016202163533307612, 0.00010388188093202189, 5.857215728610754e-05, 9.5829505880828947e-05, 0.00015371959307231009, 0.00017263831978198141, 9.8249191069044173e-05, 8.0163605161942542e-05, 9.7964446467813104e-05, 0.00012507586507126689, 0.00010578657384030521, 6.1923812609165907e-05, 0.00019236405205447227, 6.6892811446450651e-05, 0.00015225860988721251, 0.00012058104039169848, 0.0001021676289383322, 0.00013943581143394113, 8.2445614680182189e-05, 0.00013640345423482358, 0.00013677218521479517, 0.00016682597924955189, 0.00016613413754384965, 0.0002269700780743733, 0.00022752626682631671, 0.00018005724996328354, 0.00014818983618170023, 0.00014208408538252115, 0.00013497953477781266, 0.00014621226000599563, 0.00012996591976843774, 0.0001131868120864965, 0.00013593214680440724, 0.0001361851318506524, 0.00020227314962539822, 0.00015692647139076144, 0.00013349704386200756, 0.00012446881737560034, 0.0001293748791795224, 8.7377775344066322e-05, 0.00011750305566238239, 0.0001943476963788271, 0.00010239225957775488, 0.00010509181447559968, 0.00015607259410899132, 0.00010849917453015223, 8.2356054917909205e-05, 0.00010764122271211818, 0.00018353611812926829, 9.8412514489609748e-05, 0.00016218500968534499, 8.7188192992471159e-05, 0.00011826404079329222, 0.00012834378867410123, 9.9717071861959994e-05, 0.00013080937787890434, 8.668795635458082e-05, 0.00012421955761965364, 0.00011998034460702911, 0.00011587113112909719, 0.00011431310849729925, 0.00013104738900437951, 0.00010412317351438105, 9.5170638815034181e-05, 0.00012179460463812575, 0.0001464463712181896, 0.00011527165042934939, 0.00012774502101819962, 0.00017662755271885544, 5.5835753300925717e-05, 0.00016717678226996213, 0.00017837734776549041, 0.00014410083531402051, 5.8882891607936472e-05, 0.0001265251194126904, 0.00018757031648419797, 0.00012091697135474533, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 16,126,-30,26,-37,8,38,25,81,-86,-91,39,-13,-2,70,-46,-97,26,28,15,36,55,74,96,18,-24,-21,-15,-22,-1,11,-16,-56,10,-29,84,-13,34,3,5,23,-35,-39,30,-75,-49,21,-4,-27,-95,-16,-23,17,46,-12,-21,-75,-60,-27,-127,-127,21,-83,-12,-42,50,13,-4,-9,45,22,-7,-18,1,46,-13,-15,-53,-57,34,-13,-61,53,-40,-86,-47,-10,-2,-113,-10,-127,36,68,-30,57,4, -36,-46,-10,117,-19,110,-24,-27,63,2,-127,59,-43,-39,-92,127,-88,64,64,105,127,3,127,115,32,19,37,78,-11,127,-20,-127,40,74,2,82,65,93,-25,-98,127,-7,85,127,-40,-99,127,-34,-5,-57,-34,-46,38,127,-25,-127,-15,27,-127,-85,-37,-127,-34,127,-53,83,79,-28,29,127,127,-1,-67,27,-34,-81,-5,-75,-7,127,0,-36,127,-37,-92,-48,70,65,85,92,-74,-2,127,-32,127,69, 22,-103,52,0,-26,-21,-15,44,38,43,-92,29,-17,50,11,-72,-32,7,6,-14,48,31,52,99,23,-38,58,42,-8,-24,-11,-65,-71,-81,-16,72,3,21,13,66,-13,30,-24,83,-48,-35,1,2,32,-9,44,19,15,6,24,4,44,-72,7,-70,-95,52,-106,10,31,17,-62,-10,-14,-38,12,6,-15,-33,-9,-13,18,-17,-54,-23,5,-61,34,-20,1,-46,-13,-29,-87,4,-7,15,22,27,18,-21, 
  /* [0][1][][] */ 92,-5,61,127,10,-43,127,26,-30,-117,-76,127,4,-127,-62,-9,-88,-41,63,33,-89,-2,-108,-70,-12,49,-121,127,-75,71,127,97,12,46,11,127,-127,59,-12,-83,57,-127,27,72,-127,-67,13,-127,-102,-108,-52,10,117,-60,71,-17,-127,-8,-71,10,-56,-71,-66,63,-102,-33,55,-94,-24,27,-57,-127,-127,64,127,-78,43,68,-89,-55,127,-127,-24,127,-16,-16,-11,96,-11,-30,-87,44,-18,-104,33,-30, -127,21,-42,122,-81,-127,-117,-127,89,9,-47,34,-72,-99,-42,104,-127,-127,127,127,43,-127,-115,127,-127,127,20,63,-74,-59,-109,77,-127,69,127,-89,-2,127,127,-57,-52,21,16,31,-58,-127,-63,-70,-7,-127,-95,127,15,66,54,-75,28,27,101,-19,-12,-39,-127,122,-14,-127,127,127,9,44,-119,-78,-44,45,-106,-127,127,127,91,-60,-77,-12,-92,61,-98,-87,127,127,127,127,-123,-127,-114,-69,69,127, 55,7,85,119,10,-21,13,25,-64,127,-77,80,27,-9,-127,50,14,-45,18,5,-74,1,-61,-78,-5,-1,127,-22,127,119,12,-116,-42,-127,-17,95,-109,-19,-36,-62,-20,87,26,102,-46,-34,-2,-113,127,-42,-127,-5,42,-83,-127,53,96,-5,-127,64,-3,-47,-10,90,127,-45,-69,3,-52,2,-27,-44,-122,-127,1,-28,19,-31,-127,-71,-69,-122,-9,100,-127,38,0,20,-16,-20,15,47,-30,127,16,-23, 
  /* [0][2][][] */ 21,-127,52,-9,20,23,24,39,-36,-26,-11,-46,7,-9,0,3,-17,25,-8,34,-9,38,7,-31,22,24,1,-10,-24,-5,-2,39,14,-29,-26,-8,27,-9,10,-34,-2,4,-5,-58,0,-55,-23,2,-31,0,-8,33,-14,18,-24,-16,0,3,-2,42,-61,12,28,-15,-49,42,-31,-10,31,14,1,72,0,13,13,17,-27,-36,8,-16,18,-39,-12,-57,-54,23,-27,16,-85,30,13,17,-11,1,-3,-25, -41,23,127,-17,127,83,-27,8,-127,29,-101,-62,127,-15,-32,15,10,46,-1,-69,31,10,44,-28,70,-76,4,38,1,93,-18,6,-39,24,12,-38,54,34,18,-127,-25,-9,-127,-1,-7,-16,-47,-38,1,-82,-31,74,127,-42,-25,-83,-5,127,-59,23,47,-97,62,106,-32,24,-24,29,127,-20,9,98,-70,30,-29,-33,-1,-89,-13,-69,1,-75,-20,-69,-55,127,44,5,82,12,64,27,-31,-8,-5,-8, 16,95,56,-27,3,-2,-21,41,-18,89,24,-8,3,3,39,22,-40,1,-14,29,1,26,-10,-42,11,40,23,40,20,14,-28,-97,-24,-19,-14,-48,24,-36,8,23,-4,5,9,-33,-40,-33,-22,28,25,14,13,2,12,9,10,18,10,10,-4,80,-47,18,13,-16,42,-4,-46,1,-4,-9,25,77,45,-4,-7,16,-5,-12,-36,-10,-16,-32,-18,4,-24,38,-21,-44,-77,23,48,17,-26,14,0,-46, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.013274732977151871, 0.0081580085679888725, 0.0053958529606461525, 0.0061383536085486412, 0.0096413390710949898, 0.0091104200109839439, 0.013017741963267326, 0.01195327565073967, 0.008762456476688385, 0.0081366142258048058, 0.0049315979704260826, 0.017403997480869293, 0.011372734792530537, 0.0067156627774238586, 0.007537138182669878, 0.0079297088086605072, 0.0064312848262488842, 0.0082915537059307098, 0.0075993053615093231, 0.0059486166574060917, 0.0080291451886296272, 0.016302052885293961, 0.0070456108078360558, 0.0086764739826321602, 0.019591670483350754, 0.010749060660600662, 0.011352051049470901, 0.0064620357006788254, 0.008358747698366642, 0.0053657274693250656, 0.014106983318924904, 0.0086416592821478844, 0.0096498653292655945, 0.0077802375890314579, 0.011171367950737476, 0.018766447901725769, 0.0060806730762124062, 0.021674318239092827, 0.013320852071046829, 0.0080905966460704803, 0.0078894197940826416, 0.010084802284836769, 0.0096573373302817345, 0.0056738844141364098, 0.0049025015905499458, 0.0041635199449956417, 0.0087270224466919899, 0.0062442491762340069, 0.0082026459276676178, 0.0053572147153317928, 0.0077896658331155777, 0.0065175383351743221, 0.0084153693169355392, 0.0068153371103107929, 0.009694661945104599, 0.0076259644702076912, 0.010725327767431736, 0.0093936296179890633, 0.0078646941110491753, 0.0044332514517009258, 0.0090937335044145584, 0.0092449774965643883, 0.0070203859359025955, 0.0054264860227704048, 0.0082685342058539391, 0.0083341179415583611, 0.014311634935438633, 0.0090042483061552048, 0.010185276158154011, 0.0099466573446989059, 0.0092719476670026779, 0.0060978070832788944, 0.0059854881837964058, 0.013300934806466103, 0.013754801824688911, 0.0065379985608160496, 0.009659857489168644, 0.0086083263158798218, 0.0080468514934182167, 0.0076270392164587975, 0.012353815138339996, 0.0051157260313630104, 0.011148464865982533, 0.0061053382232785225, 0.0057037430815398693, 0.0070110470987856388, 0.0071704057045280933, 0.0099509768187999725, 0.010608717799186707, 0.011384770274162292, 0.0041514965705573559, 0.010998038575053215, 0.0091792894527316093, 0.010309979319572449, 0.0082748429849743843, 0.014238790608942509, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { -258, -1060, -3800, -6123, -838, 874, -162, 924, -1265, -2877, 10423, -1742, -687, 8164, 6072, -3116, 14294, 2239, -5154, -710, -4036, 587, -1191, -1542, 513, -2575, -4923, -4320, -131, -5305, 877, 221, 10759, 1010, -1595, 375, 1128, -877, -950, 6993, 655, 215, 1842, -4921, 13120, 16265, -676, 10710, -1419, 11550, 7897, -2296, -1085, -1814, -721, 9535, -71, -172, 13355, 6507, 6915, 9681, 10985, -11950, 2276, 2013, -1682, 1547, -3972, -1256, 2455, 2158, 11584, -93, -350, 9142, -641, 1300, 6557, 2372, -236, 14909, -1782, 2669, 14859, 533, -3455, -3116, 1080, -3388, 12529, 740, 1784, 799, -4359, -2724, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00030183102353475988, 0.00018549074593465775, 0.00012268689170014113, 0.00013956932525616139, 0.00021921760344412178, 0.00020714596030302346, 0.00029598776018247008, 0.00027178469463251531, 0.00019923422951251268, 0.00018500428996048868, 0.00011213101242901757, 0.00039571916568093002, 0.00025858479784801602, 0.00015269574942067266, 0.0001713738456601277, 0.00018029983039014041, 0.00014622978051193058, 0.00018852719222195446, 0.00017278736049775034, 0.00013525522081181407, 0.00018256073235534132, 0.00037066396907903254, 0.00016019785834942013, 0.00019727922335732728, 0.00044546084245666862, 0.00024440416018478572, 0.00025811450905166566, 0.00014692897093482316, 0.0001900549978017807, 0.00012200192577438429, 0.00032075410126708448, 0.00019648762827273458, 0.00021941146405879408, 0.00017690125969238579, 0.00025400627055205405, 0.00042669754475355148, 0.00013825783389620483, 0.00049281452083960176, 0.00030287963454611599, 0.00018395797815173864, 0.00017938377277459949, 0.000229300741921179, 0.00021958135766908526, 0.00012900856381747872, 0.00011146943870699033, 9.4667026132810861e-05, 0.00019842854817397892, 0.0001419770997017622, 0.0001865056692622602, 0.00012180837074993178, 0.00017711563850753009, 0.00014819094212725759, 0.00019134242029394954, 0.00015496207925025374, 0.00022043002536520362, 0.00017339352052658796, 0.0002438645315123722, 0.00021358537196647376, 0.00017882157408166677, 0.00010079998173750937, 0.00020676656276918948, 0.00021020542772021145, 0.00015962432371452451, 0.00012338340457063168, 0.00018800378893502057, 0.00018949498189613223, 0.00032540733809582889, 0.00020473191398195922, 0.00023158524709288031, 0.00022615971101913601, 0.00021081865997985005, 0.00013864740321878344, 0.00013609358575195074, 0.00030242677894420922, 0.00031274647335521877, 0.00014865615230519325, 0.00021963866311125457, 0.00019572973542381078, 0.00018296332564204931, 0.00017341795319225639, 0.00028089186525903642, 0.00011631757661234587, 0.00025348551571369171, 0.00013881865015719086, 0.00012968746887054294, 0.00015941198216751218, 0.00016303536540362984, 0.00022625792189501226, 0.0002412131434539333, 0.00025885846116580069, 9.4393646577373147e-05, 0.00025006523355841637, 0.00020871186279691756, 0.0002344206441193819, 0.00018814722716342658, 0.00032375103910453618, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -105,53,51,-27,-62,0,-57,0,-47,12,-9,-13,30,50,36,-39,16,-6,87,14,11,-48,127,71,48,17,4,24,-55,-104,-88,13,-40,-48,14,22,9,19,-1,8,5,0,-70,16,-59,-17,-4,84,-17,16,-54,-23,-5,-3,20,-53,-97,-2,-21,73,58,16,5,1,-31,-49,-49,14,-62,-64,8,-21,10,5,-78,-40,-53,-3,-40,4,-57,62,92,-81,10,51,9,32,28,7,6,-18,-35,-31,-63,2, 
  /* [1][0][][] */ 36,7,31,-41,-59,-38,-18,-13,-23,26,47,-60,9,-14,-60,-37,-12,4,-71,22,-10,-77,3,40,-21,-67,0,-47,62,-114,109,-82,49,24,-10,39,30,64,-12,-26,23,19,-10,-36,-2,52,-127,-48,-58,-55,-6,-19,33,-45,-33,47,12,-9,-22,20,28,56,-7,-93,-18,-19,-53,-1,10,-19,-75,-4,-46,-27,14,-79,15,27,33,-77,-36,-25,-90,-25,37,-44,-27,28,-70,-18,-60,34,17,42,-49,49, 
  /* [2][0][][] */ 73,-15,9,14,15,-42,73,24,-10,-4,0,13,-70,-14,1,-42,-73,-56,-28,40,6,-41,-29,35,20,-72,12,-15,-24,75,-52,127,-43,112,-53,35,-3,-16,-18,-33,-82,52,75,37,-50,13,-3,-17,36,12,-42,-62,53,-17,-22,59,51,9,24,-9,7,24,-23,4,61,7,-17,-15,13,53,-43,3,47,46,54,46,12,-85,60,59,86,-18,-50,11,-63,33,15,53,0,33,-3,40,-36,52,-20,31, 
  /* [3][0][][] */ 5,1,-27,-1,19,4,12,-63,-18,63,27,59,32,-16,-52,44,-4,-59,31,15,9,127,39,-41,16,19,-22,5,67,-28,57,-3,-12,36,-32,-21,27,60,39,2,-63,-32,-28,21,-27,39,22,-2,-8,-55,-4,-46,46,-81,-42,-41,16,88,-36,-4,-9,-8,-49,-1,27,47,-43,-2,-31,2,7,-64,-26,-37,33,-12,6,-14,-33,-30,-25,-7,-51,5,-9,-31,35,-28,2,40,33,-8,41,31,-31,60, 
  /* [4][0][][] */ 39,3,-38,14,29,29,-34,12,-29,71,84,-9,-13,-2,11,-50,8,-10,-37,49,17,-45,56,95,-62,-6,-127,18,-53,-55,7,16,-65,-45,10,54,13,39,16,27,-30,-41,50,-26,-6,5,-31,58,-40,48,15,18,51,-6,-74,19,47,-17,2,4,47,-13,25,13,-45,23,-33,3,-46,29,-48,62,38,-59,-24,-53,28,-55,-8,7,-38,87,-78,0,-35,20,30,-51,39,-3,24,11,-62,-27,27,21, 
  /* [5][0][][] */ -81,33,45,-11,39,-24,63,-53,-14,32,-7,-32,44,-20,-18,-43,-11,-37,50,27,-116,-28,-80,44,-48,0,39,0,55,-82,-13,50,52,125,-11,34,8,33,39,-21,-28,106,83,-45,-6,69,42,-8,1,10,-31,32,15,-38,33,-99,47,-51,-55,-60,51,107,-50,-24,86,-60,-70,-62,-58,-25,-59,-24,-25,25,-28,-37,17,-33,-40,-14,127,-11,15,-82,-77,37,46,-2,-33,43,22,-8,-7,38,0,92, 
  /* [6][0][][] */ 48,-10,-77,22,-36,-104,100,75,-52,63,-13,71,-127,-73,52,60,3,-57,1,6,-10,-19,-60,-54,-51,48,66,24,27,33,90,-45,27,13,15,-69,18,5,11,89,7,18,-54,-21,-4,-56,-79,39,39,-113,-22,70,28,8,-21,-59,72,48,11,0,-102,53,-79,0,30,19,-5,51,36,19,-9,-52,-48,26,97,32,58,-23,45,-74,-11,-54,-81,60,3,-57,50,21,-41,58,36,43,-31,18,-35,115, 
  /* [7][0][][] */ 37,93,-50,-65,-21,-1,48,44,-58,33,-42,-50,-45,20,6,-23,-45,-53,-24,62,-8,127,20,44,3,-6,21,47,59,66,83,-15,78,32,-38,22,10,-3,4,16,-61,-21,20,-38,26,-44,76,-33,49,-74,-91,-38,-48,2,-1,-6,36,23,-113,-4,1,117,40,-24,-19,-12,-43,12,-47,-12,-111,36,22,78,-37,58,-72,49,12,-75,-13,-42,52,-87,46,-17,-6,-8,-13,96,-77,69,65,-22,-47,8, 
  /* [8][0][][] */ -11,85,-46,47,-35,-33,-93,26,-104,-33,2,-3,-46,37,37,90,0,-46,-7,5,33,-1,0,-19,-41,75,3,25,-13,-30,-44,-37,-26,-55,-24,-77,-48,23,59,12,-6,-37,27,2,-34,-38,9,-20,-30,-21,51,75,1,-17,-71,100,-41,28,1,-35,-41,7,9,56,-34,-63,-34,-7,-39,7,6,3,-19,-55,-124,-21,-44,33,-65,-40,-28,-10,-36,-32,2,-4,19,28,14,60,-62,-14,-89,-127,30,-51, 
  /* [9][0][][] */ -16,20,-78,48,-28,-37,71,64,-13,56,-25,97,-39,-22,28,127,11,16,77,7,22,16,33,-95,-39,-8,27,-5,18,-13,44,51,-33,3,1,-119,25,-23,-36,-23,-18,17,49,-19,-26,1,22,19,47,87,29,-7,-43,-77,2,3,5,-13,72,-19,-64,53,-50,-26,92,-14,-23,9,-67,26,41,46,-14,88,-25,-29,-28,21,-45,-7,57,-31,58,0,29,-21,-19,-41,-58,23,-1,-4,71,35,-53,-17, 
  /* [10][0][][] */ 62,-10,-32,4,-28,-37,59,-25,9,-25,-24,-13,-79,-20,6,-6,-69,-28,13,14,38,40,16,-9,-46,77,36,-5,-45,-79,-26,-21,68,-31,49,4,65,-82,81,127,9,-58,-2,-11,-28,-88,-8,50,21,77,-57,-36,-25,29,14,44,14,-62,77,57,-7,44,-56,-14,-14,-51,23,57,24,-34,-8,43,112,29,21,-81,32,-38,45,-8,-52,31,36,25,-35,-12,3,43,-32,-18,21,46,46,57,-16,4, 
  /* [11][0][][] */ -55,-54,57,-60,8,-26,-40,-73,43,-46,-5,-13,-2,-7,15,8,-56,-8,58,8,-70,28,-77,-99,13,15,-44,29,17,-79,41,-43,20,1,36,-25,-71,7,-113,27,-87,63,-63,42,34,4,-2,-15,16,-43,-52,-43,8,34,74,-60,-29,-87,32,-46,-20,-37,-21,-124,1,-60,72,82,127,13,78,-42,-30,-21,65,-44,112,56,34,53,5,9,-29,96,90,-2,-11,5,-79,-80,-23,17,54,33,66,73, 
  /* [12][0][][] */ 41,0,-12,-44,35,127,-2,41,54,73,9,80,7,54,10,1,-58,47,31,56,123,-13,73,-62,33,21,-68,-71,-21,103,3,23,36,-9,1,-30,50,1,-32,-51,30,-25,49,70,-6,42,1,-8,-59,31,-4,18,-23,-31,10,20,-23,68,6,41,37,-93,29,-103,-1,90,-24,-41,-9,-37,57,6,-9,21,-10,54,-17,44,-75,-12,-20,31,120,11,-14,80,-25,-89,72,23,-74,59,64,20,-31,-95, 
  /* [13][0][][] */ -5,43,-15,-42,-31,-2,13,-20,8,-25,-26,-66,53,-101,-49,-73,-7,-35,-72,-13,-86,-36,9,109,-40,2,107,11,29,-22,57,57,13,5,-127,109,-33,-54,10,-77,105,13,5,40,-6,-89,58,-18,88,-4,-47,22,23,-7,-6,78,84,-51,-45,-20,45,30,20,-90,3,32,-42,31,-68,-26,-84,7,-75,28,-45,-90,-108,6,48,78,-17,65,39,-90,51,46,27,-17,-27,-5,-3,23,-61,36,-30,-8, 
  /* [14][0][][] */ -12,29,-79,-26,78,94,-80,-3,32,-41,81,2,10,-21,-39,-67,-61,13,45,127,6,-28,1,14,6,28,-32,65,16,7,-25,17,62,-4,-48,-1,-16,47,69,-4,63,4,36,15,10,-40,56,-24,26,-8,-19,-29,46,11,-40,28,15,60,-92,-20,-10,-64,-32,-102,12,-40,-52,-10,-78,47,-21,27,-1,-25,-26,-31,31,-21,-43,-30,29,10,4,-18,-11,48,-12,-20,-31,73,70,23,-2,-33,-53,-64, 
  /* [15][0][][] */ -61,-60,54,-58,11,-34,-41,-96,8,9,-19,50,-2,-22,24,95,-100,-11,8,-73,30,-25,-8,-89,44,3,45,-66,-59,-127,-65,16,-32,47,82,-92,-8,-35,16,-2,-29,3,16,-43,-27,-11,52,91,-43,-5,23,-33,-45,53,10,-66,-94,-19,100,27,-32,38,-92,22,-63,-4,-2,24,54,-74,78,-17,53,-41,-20,-46,29,38,21,-8,-30,68,59,32,-7,-17,-111,15,-7,-62,-98,24,31,-47,-13,67, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0024126223288476467, 0.0032291084062308073, 0.0039667701348662376, 0.002734665758907795, 0.0032412812579423189, 0.0029963746201246977, 0.0023680438753217459, 0.0024686420802026987, 0.00435617845505476, 0.0029939988162368536, 0.0025429902598261833, 0.0021387008018791676, 0.0037240551318973303, 0.0030221652705222368, 0.0039903954602777958, 0.0036198068410158157, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 9543, 18733, -7492, 2101, -629, 7406, 123, -1646, 18334, -5635, -6791, 9693, -19388, 10302, 2537, 13983, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.6767585192574188e-05, 7.5979020039085299e-05, 9.3335773271974176e-05, 6.4345076680183411e-05, 7.6265445386525244e-05, 7.0502930611837655e-05, 5.5718679504934698e-05, 5.8085697673959658e-05, 0.00010249832121189684, 7.0447029429487884e-05, 5.98350670770742e-05, 5.0322374590905383e-05, 8.762483048485592e-05, 7.110977458069101e-05, 9.389165643369779e-05, 8.5171930550131947e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -18,99,-80,47,63,-26,104,82,-65,9,26,-108,99,127,-58,16, 
  /* [1][0][][] */ -32,10,-76,-19,-14,37,33,-127,28,-51,-13,-47,-31,-42,-68,15, 
  /* [2][0][][] */ -23,-26,41,70,31,42,-99,127,-25,3,62,-66,-5,-63,-39,56, 
  /* [3][0][][] */ 75,-84,63,-2,-10,-29,-27,127,-31,47,63,44,-9,49,11,8, 
  /* [4][0][][] */ -47,-26,-21,54,-84,21,-24,-127,12,-18,42,-5,25,30,106,120, 
  /* [5][0][][] */ 127,39,-46,-38,-83,13,37,63,34,-7,99,118,109,33,-125,20, 
  /* [6][0][][] */ 20,-30,-53,-46,-67,7,-5,-39,-44,-46,-31,21,88,50,127,-13, 
  /* [7][0][][] */ -59,26,-36,-64,-5,-48,-63,7,-71,44,-58,-49,-127,-43,2,88, 
  /* [8][0][][] */ 49,39,70,10,49,18,67,12,65,-24,40,10,-127,-30,-73,11, 
  /* [9][0][][] */ -44,64,34,-41,-24,-7,30,-9,-42,54,-31,8,50,127,29,25, 
  /* [10][0][][] */ 92,64,-46,63,-25,-24,54,-42,-92,-36,-73,-127,-127,-83,19,101, 
  /* [11][0][][] */ 49,3,60,20,-16,-27,13,107,-95,20,-29,4,-16,-5,63,127, 
  /* [12][0][][] */ -25,-8,-7,2,17,-5,120,32,-43,15,24,1,-27,76,-69,127, 
  /* [13][0][][] */ 10,28,30,50,97,46,96,127,-24,88,-79,-74,50,91,-111,-34, 
  /* [14][0][][] */ -127,126,13,-18,9,6,66,13,-51,41,114,-5,-93,28,-41,46, 
  /* [15][0][][] */ -8,-33,-127,-48,87,-53,-95,-32,-29,-19,-24,-76,3,-89,-52,45, 
  /* [16][0][][] */ 119,-15,15,-15,35,-36,41,-21,-50,14,127,46,54,6,-26,16, 
  /* [17][0][][] */ 7,16,-36,-92,-16,-55,120,-127,24,-25,-36,44,26,69,-8,64, 
  /* [18][0][][] */ 35,123,-15,-56,56,-77,-21,-62,-35,127,-25,5,-38,61,-22,-25, 
  /* [19][0][][] */ -70,-124,116,-96,39,-127,32,-42,44,35,90,105,21,-27,69,-30, 
  /* [20][0][][] */ -18,85,51,5,7,1,23,-32,59,-10,96,-20,-127,-35,-78,-4, 
  /* [21][0][][] */ -68,40,29,23,70,33,68,62,-127,64,-52,7,-13,22,-60,-33, 
  /* [22][0][][] */ 23,-98,59,15,25,-127,113,20,25,-52,-53,-89,55,-80,-49,-68, 
  /* [23][0][][] */ -47,-109,57,73,38,-20,20,-44,0,-34,75,-2,31,93,96,127, 
  /* [24][0][][] */ 6,16,33,81,51,31,-62,-127,59,20,-44,13,8,-1,-17,-31, 
  /* [25][0][][] */ -10,28,27,-44,-25,-4,7,-27,-27,59,-48,-12,51,127,31,2, 
  /* [26][0][][] */ -63,77,2,15,28,-83,-2,-38,20,20,14,74,2,1,-98,127, 
  /* [27][0][][] */ -13,-127,-37,8,-58,91,-4,-50,17,-31,48,-43,38,-39,-91,-25, 
  /* [28][0][][] */ -38,2,35,82,24,18,-36,-127,-118,45,105,-10,67,11,-48,-23, 
  /* [29][0][][] */ -127,106,-30,-23,-26,12,-119,-83,-36,-36,3,4,-4,-72,-116,66, 
  /* [30][0][][] */ 59,83,-63,85,-123,-99,-79,-23,-38,-10,9,-124,127,31,-11,105, 
  /* [31][0][][] */ 127,30,-53,-25,-62,23,92,46,-71,-13,47,29,68,27,-16,-1, 
  /* [32][0][][] */ -29,-25,127,-3,-26,79,79,10,-19,-14,-1,33,0,75,60,49, 
  /* [33][0][][] */ -6,22,-57,-64,-19,29,127,37,-9,-24,26,-84,114,124,-40,51, 
  /* [34][0][][] */ -94,-24,106,23,32,-61,102,-2,-127,42,32,-54,64,64,-45,-41, 
  /* [35][0][][] */ -12,4,-19,9,-57,127,-42,10,-22,117,-17,61,-35,70,33,2, 
  /* [36][0][][] */ -4,-77,127,-42,-49,25,-45,-7,15,22,-55,63,12,-83,-29,38, 
  /* [37][0][][] */ 68,13,55,-12,103,-75,-51,31,-57,127,-49,-1,-82,-26,110,-24, 
  /* [38][0][][] */ 61,48,21,-127,-15,-67,-120,61,-106,64,-124,-67,-65,-120,-121,71, 
  /* [39][0][][] */ -65,24,-54,-36,-82,-83,67,16,-127,-33,14,77,41,4,2,46, 
  /* [40][0][][] */ 127,36,10,-86,-73,22,10,-33,-38,-22,-48,-88,20,47,43,31, 
  /* [41][0][][] */ 97,-88,-86,-53,-4,11,-69,-17,77,-33,1,-68,127,-89,60,-45, 
  /* [42][0][][] */ -14,-79,-48,127,-4,-93,-106,11,18,3,14,50,-87,72,-66,8, 
  /* [43][0][][] */ -86,-49,-43,-117,-57,3,-4,77,41,-127,-36,32,-21,-54,-28,93, 
  /* [44][0][][] */ -52,45,32,-56,-33,-31,43,124,126,-95,98,127,118,36,-40,13, 
  /* [45][0][][] */ 25,73,-90,96,127,-86,-36,-70,114,-77,80,-49,-51,7,-89,74, 
  /* [46][0][][] */ -23,-40,13,-4,102,-20,30,24,-17,127,-27,-114,39,62,-46,70, 
  /* [47][0][][] */ 67,-29,-40,-16,70,-9,-31,-54,-5,127,-15,43,-18,-110,-90,24, 
  /* [48][0][][] */ 6,25,-20,-127,-10,-55,115,-123,20,-3,-40,58,43,88,-3,52, 
  /* [49][0][][] */ -26,123,-74,17,32,-47,64,46,-21,6,54,-98,-37,84,127,-97, 
  /* [50][0][][] */ 15,41,-19,4,-127,-3,-70,-56,56,73,28,29,-34,-43,6,33, 
  /* [51][0][][] */ 127,-43,-42,-11,-39,81,-92,-32,47,-13,-44,57,-25,-65,13,32, 
  /* [52][0][][] */ -13,-46,50,62,-39,-101,-127,-1,-42,-49,-40,-83,28,-58,19,69, 
  /* [53][0][][] */ 32,97,69,-127,16,111,89,-18,-12,-19,-16,-48,106,-103,17,41, 
  /* [54][0][][] */ 26,115,0,-18,-9,-87,-97,43,9,-31,-29,127,68,88,13,65, 
  /* [55][0][][] */ -42,-12,53,32,45,-39,101,97,-87,-2,21,4,127,57,0,-5, 
  /* [56][0][][] */ 127,29,9,23,-53,117,-50,-85,-20,46,-80,12,-71,105,-20,45, 
  /* [57][0][][] */ -53,-33,-74,-44,-79,-95,79,-38,-127,-34,82,85,-8,18,-19,77, 
  /* [58][0][][] */ 48,-49,61,23,7,-58,-19,10,27,-13,-127,-29,21,-37,-32,41, 
  /* [59][0][][] */ 51,0,-126,75,1,32,64,-35,-37,-38,48,-68,-127,-65,-8,109, 
  /* [60][0][][] */ -6,32,-19,21,-17,-26,-19,3,-33,-76,68,125,-66,-127,-43,3, 
  /* [61][0][][] */ -33,10,69,-93,-68,40,7,97,-15,-101,60,84,65,-12,10,127, 
  /* [62][0][][] */ 75,34,-11,-127,-17,3,8,-42,-7,27,-37,44,29,-21,-85,-72, 
  /* [63][0][][] */ -3,-33,2,-8,-67,-70,-62,14,-66,-25,-33,-23,127,2,63,-20, 
  /* [64][0][][] */ 22,3,-24,53,-116,-36,-18,-96,64,123,48,10,27,-59,-53,127, 
  /* [65][0][][] */ -26,12,-16,-17,-82,86,22,-20,55,-121,95,-75,84,79,-127,57, 
  /* [66][0][][] */ -108,92,-84,-75,37,-25,-105,-69,-89,108,81,8,-127,-66,39,53, 
  /* [67][0][][] */ 0,-32,-127,-102,60,67,13,-31,-19,-9,51,-12,19,27,9,52, 
  /* [68][0][][] */ 49,18,-18,-46,-66,27,20,30,-48,62,127,-8,-21,-58,-122,3, 
  /* [69][0][][] */ 80,-111,56,-55,20,-115,-29,127,0,73,93,93,-34,64,-31,2, 
  /* [70][0][][] */ 56,13,127,46,106,-15,123,20,33,28,-73,27,-65,60,-68,31, 
  /* [71][0][][] */ 2,32,84,-67,-127,-76,23,1,-18,-15,28,-88,-83,-10,2,42, 
  /* [72][0][][] */ -61,-95,26,-115,79,-7,7,51,-69,18,-127,-21,64,126,-57,117, 
  /* [73][0][][] */ 10,25,40,-7,127,-81,-38,15,-44,100,-74,41,-87,-40,122,-12, 
  /* [74][0][][] */ -100,12,-127,-53,53,-31,-32,10,-63,-2,-104,-21,-44,-65,-59,85, 
  /* [75][0][][] */ 91,-32,51,-48,17,7,-127,-18,-10,-100,66,-7,15,-12,2,-12, 
  /* [76][0][][] */ 7,-43,-41,119,40,93,102,-69,90,-127,88,120,-5,-89,-78,47, 
  /* [77][0][][] */ -35,-34,127,-20,34,-26,-30,-109,25,14,33,87,47,38,17,0, 
  /* [78][0][][] */ -48,-2,21,-34,4,-58,32,7,24,-14,11,-106,-86,-76,-127,-59, 
  /* [79][0][][] */ -111,-77,-32,19,127,30,-13,-5,22,23,-7,65,-70,-92,-80,-8, 
  /* [80][0][][] */ 9,-127,71,120,-26,-24,-113,95,-20,23,53,-27,-42,-10,2,45, 
  /* [81][0][][] */ 108,74,-19,83,-9,36,35,127,22,11,121,51,106,33,72,-20, 
  /* [82][0][][] */ -55,-1,11,-33,26,-127,-112,-85,-1,74,-40,-29,-31,104,-72,-22, 
  /* [83][0][][] */ 88,-15,83,-38,-42,-3,-116,-3,24,-127,17,-54,-28,-7,9,-21, 
  /* [84][0][][] */ 9,-81,-109,25,123,37,44,35,-127,7,-113,-27,53,-41,-75,16, 
  /* [85][0][][] */ 24,84,53,-38,102,14,35,-96,107,-27,23,-34,127,-72,28,-9, 
  /* [86][0][][] */ 119,-35,127,53,4,-51,74,45,-59,-52,-98,-49,41,17,-62,8, 
  /* [87][0][][] */ -12,9,9,-64,66,-22,-41,9,35,-44,80,-26,-94,-127,-26,29, 
  /* [88][0][][] */ -56,-29,44,-4,22,34,-72,-43,-1,14,-72,-127,-39,-30,-9,-24, 
  /* [89][0][][] */ -83,10,20,-63,30,16,-127,20,97,17,-74,-26,-14,-83,-37,-27, 
  /* [90][0][][] */ -11,-15,-24,-74,127,28,-62,54,34,60,22,-33,53,21,-59,-27, 
  /* [91][0][][] */ -44,-66,29,57,-34,-16,-13,83,-51,-51,22,-54,10,79,29,127, 
  /* [92][0][][] */ -16,63,7,-19,-29,51,-101,37,-44,-9,55,2,-23,127,54,13, 
  /* [93][0][][] */ 3,62,-61,-64,55,56,-59,-2,80,49,70,55,-127,4,-56,81, 
  /* [94][0][][] */ 18,55,91,22,-127,-33,14,-8,24,-22,28,-18,-55,-14,12,-22, 
  /* [95][0][][] */ -57,65,22,31,124,-35,-55,104,1,-4,-66,116,-20,56,127,-34, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0016454795841127634, 0.0024907938204705715, 0.0024280264042317867, 0.0024013074580579996, 0.0017385019455105066, 0.0021259754430502653, 0.0020143762230873108, 0.0026605466846376657, 0.0020180852152407169, 0.0028517534956336021, 0.0012680211802944541, 0.0021658467594534159, 0.001481918734498322, 0.0012083707842975855, 0.001313714892603457, 0.0022039336618036032, 0.0034013623371720314, 0.002213385421782732, 0.002211670158430934, 0.0014611444203183055, 0.0018817933741956949, 0.0021829616744071245, 0.0017183476593345404, 0.0020732083357870579, 0.0025400286540389061, 0.0023658520076423883, 0.0017448599683120847, 0.0022037504240870476, 0.0017992198700085282, 0.0022075213491916656, 0.0017107977764680982, 0.0029715418349951506, 0.0024740253575146198, 0.0017075663199648261, 0.0014940741239115596, 0.0021046192850917578, 0.0024818906094878912, 0.0018794590141624212, 0.0013650766341015697, 0.0016401757020503283, 0.002285803435370326, 0.0017943429993465543, 0.0025381825398653746, 0.0017553969519212842, 0.0019610519520938396, 0.0016812303801998496, 0.0022955583408474922, 0.0019777938723564148, 0.001160682993941009, 0.0017682401230558753, 0.0024207660462707281, 0.0017106945160776377, 0.0016047173412516713, 0.0020157559774816036, 0.0025675215292721987, 0.0019038282334804535, 0.0020507483277469873, 0.0013987674610689282, 0.0022095968015491962, 0.0014907559379935265, 0.0021442798897624016, 0.0019778176210820675, 0.0027059782296419144, 0.001479544211179018, 0.0014824088430032134, 0.0016037528403103352, 0.0014061732217669487, 0.0019658368546515703, 0.0019674054346978664, 0.0029673336539417505, 0.0019920745398849249, 0.00173796690069139, 0.0017100158147513866, 0.0019684094004333019, 0.001754359807819128, 0.0015555012505501509, 0.0013688089093193412, 0.0019756271503865719, 0.0022424208000302315, 0.001918031251989305, 0.0012769958702847362, 0.0021826669108122587, 0.0022081558126956224, 0.0019332253141328692, 0.0020844100508838892, 0.0026536637451499701, 0.0017479730304330587, 0.0021221167407929897, 0.0022375637199729681, 0.0028793332166969776, 0.002493714215233922, 0.0023797419853508472, 0.0022458401508629322, 0.0014067512238398194, 0.0032492822501808405, 0.0021471334621310234, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1603, -10, 3559, 4507, 4968, -2668, 3979, -1175, -2744, -513, 6708, -2709, 4803, 6670, 3014, 2397, -631, -479, -1847, 5869, 3077, -566, 3161, -752, -1039, 3705, 2139, 2138, 5439, 2534, 4127, 1106, 1427, 5379, 5861, 3347, -132, 3874, 3672, -4291, -294, 2599, -169, 1994, -1477, 658, -1440, 769, -7965, 2270, 1321, -3693, 6185, -1258, 1884, 1768, 1193, 3709, -847, -2520, 411, 1774, 530, 6489, 6231, 3822, 3719, 4896, 4531, -575, 3156, 5389, 3623, -1646, 5398, 7070, 886, -3955, 676, 1391, 9458, 2193, -416, -2675, 1888, 677, 2267, -2405, 4260, 285, 3297, 1234, -67, -3686, -137, 2364, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00012255911133252084, 0.00018552006804384291, 0.00018084500334225595, 0.00017885491251945496, 0.00012948764197062701, 0.00015834755322430283, 0.00015003538283053786, 0.00019816365966107696, 0.00015031163638923317, 0.00021240518253762275, 9.4445145805366337e-05, 0.00016131726442836225, 0.00011037672811653465, 9.000224235933274e-05, 9.784851863514632e-05, 0.00016415405843872577, 0.0002533413062337786, 0.0001648580509936437, 0.00016473029972985387, 0.00010882940841838717, 0.00014016030763741583, 0.00016259202675428241, 0.00012798649549949914, 0.00015441734285559505, 0.00018918719433713704, 0.00017621411825530231, 0.00012996119039598852, 0.00016414040874224156, 0.00013401004252955317, 0.00016442127525806427, 0.00012742416583932936, 0.00022132729645818472, 0.00018427112081553787, 0.00012718347716145217, 0.00011128209007438272, 0.00015675689792260528, 0.00018485693726688623, 0.0001399864413542673, 0.00010167405707761645, 0.00012216407048981637, 0.00017025190754793584, 0.00013364681217353791, 0.00018904969329014421, 0.00013074601884000003, 0.00014606367039959878, 0.00012522192264441401, 0.0001709784846752882, 0.00014731065311934799, 8.6450345406774431e-05, 0.00013170260353945196, 0.00018030423962045461, 0.00012741646787617356, 0.00011952305067097768, 0.00015013814845588058, 0.0001912349252961576, 0.00014180151629261672, 0.00015274446923285723, 0.0001041834257193841, 0.00016457586025353521, 0.00011103494034614414, 0.00015971090761013329, 0.00014731241390109062, 0.00020154750382062048, 0.00011019986413884908, 0.00011041323159588501, 0.00011945120786549523, 0.00010473502334207296, 0.00014642006135545671, 0.00014653689868282527, 0.00022101386275608093, 0.00014837431081105024, 0.00012944778427481651, 0.00012736592907458544, 0.00014661166642326862, 0.00013066876272205263, 0.00011585732136154547, 0.00010195204231422395, 0.0001471492723794654, 0.00016702066932339221, 0.00014285939687397331, 9.5113595307338983e-05, 0.00016257006791420281, 0.00016446853987872601, 0.00014399108476936817, 0.00015525166236329824, 0.0001976509956875816, 0.00013019306061323732, 0.00015806015289854258, 0.00016665890871081501, 0.0002144593745470047, 0.00018573759007267654, 0.00017724867211654782, 0.00016727535694371909, 0.00010477807518327609, 0.00024201403721235693, 0.00015992345288395882, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 25,71,31,-86,-56,21,-16,103,17,-46,-94,-107,-85,98,-38,68,40,96,6,-13,-17,-95,-48,26,70,-102,22,105,53,-58,72,7,-74,87,25,-55,-40,-6,-95,-7,-96,-64,127,-52,70,8,-74,84,-84,88,-50,2,-32,79,-4,45,-80,-63,-14,52,17,87,26,-127,82,-95,-70,55,58,-87,-21,115,-52,18,-33,90,-30,-71,-15,-20,-99,42,54,11,-47,-76,-64,-5,9,18,19,61,-82,-42,-29,29, 
  /* [1][0][][] */ 69,18,73,23,30,-53,-18,127,48,40,-62,57,-92,-110,35,-61,-45,-17,11,-29,104,69,-88,-62,4,-24,-15,-55,80,53,-22,-54,-83,-73,-89,-67,28,-90,-40,23,-13,66,3,39,46,17,-59,47,32,-116,5,-44,-15,-98,-58,-108,38,52,60,24,71,-67,-42,-60,120,-4,9,92,79,72,47,108,-3,13,61,26,76,-89,121,2,-72,89,-69,42,23,-1,-124,51,-70,-90,45,-21,-42,36,33,-23, 
  /* [2][0][][] */ 3,-66,-75,-93,-40,10,69,0,21,-42,-62,-40,47,92,-68,-109,-92,30,-19,33,-86,-41,29,22,-28,70,-44,-46,-19,-34,-75,28,50,-64,49,6,-70,61,-65,60,57,-12,111,69,-58,-21,53,38,-18,-38,4,85,-79,-71,12,-70,-37,20,84,101,88,77,-57,102,103,84,-71,-75,1,34,66,-20,32,40,-17,-59,86,112,-97,-65,-77,118,86,64,-66,43,48,25,92,127,103,105,-42,-34,85,121, 
  /* [3][0][][] */ -68,83,57,-65,92,93,71,65,90,24,36,-43,93,46,95,99,-108,63,-35,94,-65,76,-70,4,127,73,-93,16,52,30,-37,97,-89,26,27,-80,-82,-7,-70,-53,-78,-24,-54,19,-65,-95,-18,-23,-53,104,-30,-88,12,44,96,-56,-75,-92,64,-86,-78,28,-81,-20,10,79,-49,-32,-33,-22,80,5,79,120,-48,-64,-110,-44,71,-52,54,103,-66,-67,72,-99,94,-82,-24,-76,92,87,-74,-47,32,0, 
  /* [4][0][][] */ -48,10,98,33,69,-3,22,-40,-5,95,-54,-3,-49,111,16,-62,60,19,-12,-27,-78,100,-57,-8,8,-49,56,53,38,-91,120,42,-41,62,-2,-10,112,25,-56,-80,127,109,-82,-67,-6,53,2,-14,72,25,98,119,106,-52,26,69,-52,-22,113,-69,53,1,16,104,-32,32,-93,-47,28,101,54,31,-12,28,39,-18,-28,95,-17,51,59,-54,60,45,73,126,46,-70,18,30,110,81,125,-45,-51,-50, 
  /* [5][0][][] */ -79,96,-37,-54,25,-15,-42,55,-4,-78,48,23,-63,16,93,90,-90,101,70,-9,96,-1,-45,90,-127,34,-24,-46,-25,34,51,1,-60,58,53,48,84,-79,-55,-30,60,-29,-8,-42,88,102,-2,-10,25,75,83,40,-73,-37,33,-36,86,-33,-71,64,54,58,-7,41,63,-43,42,44,84,-61,29,4,-85,44,19,-76,-40,45,31,2,62,80,-83,-63,37,-34,-86,0,53,54,-39,94,-19,93,-4,50, 
  /* [6][0][][] */ 114,-29,13,-79,-110,-38,69,-111,-2,86,31,127,51,-58,-30,117,-77,92,24,97,-124,119,102,30,-10,52,-118,-103,-43,-100,9,51,-82,20,79,75,-93,-21,17,57,-78,70,62,2,-108,66,-91,-37,58,113,-19,-10,-64,-96,-57,-77,-78,-10,20,73,46,-45,97,29,118,88,-31,50,-5,-95,-44,-15,71,-30,95,125,-49,62,-52,-81,33,-6,-43,-65,87,11,10,105,15,-45,-81,-30,-73,-29,108,-50, 
  /* [7][0][][] */ 105,8,13,-13,104,-46,33,-46,-16,15,25,50,-14,127,51,65,66,-17,9,88,40,-3,39,10,106,13,4,96,-9,-33,35,45,-19,16,106,35,121,48,38,-41,-23,68,-21,55,5,-68,-2,-10,11,34,-11,103,19,67,95,82,70,-78,39,-105,-20,-29,3,16,13,-30,-61,-37,39,-3,-34,48,-17,90,8,90,-72,15,-28,21,-17,87,46,88,11,-8,35,-85,80,118,123,-13,86,-110,99,-24, 
  /* [8][0][][] */ -50,-41,-91,-9,54,-7,-35,-85,99,-113,115,-98,-15,-96,-96,0,18,73,68,-66,104,71,79,-47,-93,-107,29,-85,-75,-64,-103,-7,-38,-2,-91,111,-107,-106,-48,-59,-32,-4,46,-10,12,-39,-29,92,50,72,-30,-27,100,12,-22,-98,-4,3,-36,28,-73,-5,-127,67,-12,-28,16,-57,-61,23,-94,50,37,71,119,75,102,-6,0,-5,39,80,-22,33,64,-67,-40,86,48,49,-53,73,-99,116,101,-63, 
  /* [9][0][][] */ -33,-41,23,80,27,58,84,33,10,52,66,66,104,60,-34,-27,-12,-65,-46,-81,-93,88,20,-25,-45,-60,-48,48,65,-120,-31,48,-92,-67,113,-28,-33,24,-69,-69,105,105,2,2,38,54,35,-16,-31,-36,-103,-62,-108,25,27,75,-3,-79,15,2,-6,-70,32,83,-127,74,69,62,97,-57,-106,14,49,74,65,-108,106,-68,11,-48,-114,-35,92,-74,60,-71,-86,14,-67,112,39,8,-83,20,30,88, 
  /* [10][0][][] */ -102,40,-89,-100,-51,86,-127,-110,76,-109,84,73,-15,31,69,-12,110,8,-81,36,-17,-66,-47,83,48,111,-40,-35,-117,-88,-17,-118,62,32,110,-124,117,-73,43,114,88,42,27,54,-23,21,-5,-9,-96,125,91,112,103,-108,98,58,17,-19,86,-19,70,61,98,62,-47,104,-7,52,0,-14,73,25,-107,-101,20,57,67,101,75,-4,-6,40,8,41,12,77,-87,19,-12,41,-61,88,50,66,21,-4, 
  /* [11][0][][] */ 85,75,-56,-91,95,5,-47,-69,-59,42,51,-14,33,-74,63,-65,-102,82,-10,-46,-26,-46,69,-72,-116,93,81,95,8,57,1,45,52,87,-115,-65,17,89,-44,-65,47,-127,124,-95,94,46,-99,8,60,68,-53,95,58,-71,-46,-99,-14,88,-104,91,-20,11,125,-69,73,-19,104,8,102,100,-41,25,-82,-40,32,-97,3,75,-61,16,-85,-30,-107,62,8,-75,-53,16,-90,27,-28,-49,79,54,108,-35, 
  /* [12][0][][] */ -17,-42,-10,127,45,-54,0,-48,-44,39,3,67,-22,-25,-13,81,41,-39,39,121,-53,22,87,86,25,108,-78,48,115,-49,93,91,72,17,43,-13,45,-30,89,63,96,102,56,-21,42,-25,-2,85,-96,117,-13,85,-4,-29,95,77,35,-43,-30,-91,22,19,114,25,-29,37,29,-10,-51,-44,67,24,-40,-24,22,27,-82,18,102,-15,61,98,98,33,90,-8,25,-78,-13,-25,41,51,-35,-124,-40,100, 
  /* [13][0][][] */ 45,34,70,-80,95,10,21,-73,10,-123,26,20,-24,76,26,62,67,46,-11,74,104,-29,-21,-85,79,-91,-14,-90,19,-115,-60,-26,-28,-123,17,-16,60,-119,64,37,-28,-79,60,75,39,-23,53,55,-92,73,-65,-12,-47,-110,-11,79,25,-68,70,-77,-123,-27,68,-67,-105,28,-50,-127,-110,-79,-111,82,-58,-29,92,-38,-48,82,-26,-68,66,32,-20,103,86,-55,-124,66,-65,-69,20,-39,57,105,-39,-95, 
  /* [14][0][][] */ -31,-43,91,64,60,-60,33,-5,-9,68,-14,-45,8,108,-17,46,-75,-24,-13,-67,4,43,-23,-26,-7,-8,63,37,78,-58,79,-25,-22,94,114,33,53,84,-60,-54,107,127,105,37,85,-59,5,-24,-105,20,-15,-31,5,-59,90,-82,37,-70,-9,-83,-65,-68,45,30,5,66,14,1,-81,2,42,-39,-77,-42,58,9,-65,10,73,19,118,-15,106,55,-52,-14,-35,77,66,20,-45,-16,-4,-97,-46,-27, 
  /* [15][0][][] */ 30,66,-1,-83,-89,101,6,69,-79,-41,110,-62,-4,-55,-32,-25,-33,100,-101,17,-9,-96,-66,-19,-17,-7,117,112,-17,-59,-116,25,56,108,-46,-15,-45,84,-40,-84,-64,94,127,-50,90,75,-75,-101,36,-32,-20,-95,-82,-9,37,9,61,-5,70,-32,-71,-93,-99,-81,-33,39,0,-69,-7,-111,-77,17,72,23,13,82,-13,103,-84,22,-20,-103,-32,-75,-53,-44,88,-3,56,-115,-85,105,2,-20,103,-100, 
  /* [16][0][][] */ -8,20,-99,122,84,-70,100,104,-43,43,81,-68,-54,89,-121,-32,31,76,-47,-28,-119,-20,-102,11,127,-64,-81,20,-50,92,111,32,-82,-48,18,10,-15,111,-112,60,46,45,76,-58,-98,-17,-99,-56,-27,52,92,67,-39,-119,58,7,40,89,-40,-66,35,-27,-2,69,-14,28,67,-47,-1,-51,74,17,74,12,45,-79,76,-55,-98,-52,-29,31,-7,-89,93,-61,5,-113,114,-67,98,-108,46,20,75,-69, 
  /* [17][0][][] */ -14,92,-107,-52,-25,43,-46,106,43,-29,98,-36,-28,91,39,-53,30,80,-15,66,29,-15,-55,-13,-127,6,-26,-70,-37,49,60,-91,56,-33,-29,48,33,-91,-23,45,-43,93,-6,-71,106,34,-74,-78,37,-123,-4,-122,-73,11,39,24,-56,83,-61,-46,106,95,67,67,-46,37,-78,74,-58,-64,15,-19,-33,-67,2,37,-98,-60,110,-77,-57,-38,92,-80,75,31,-51,110,-3,74,-36,61,-104,0,60,-68, 
  /* [18][0][][] */ 69,-98,-106,-25,56,8,-114,-99,-55,32,-77,-78,-7,83,21,35,13,85,-98,-42,-76,37,20,38,7,-27,35,-95,-23,-110,29,-110,-30,77,99,-67,27,-56,-69,-78,-101,11,98,-53,-22,47,86,-74,87,3,-45,-103,-46,0,-44,27,54,22,-117,63,-97,-23,56,92,-13,25,-97,-100,91,-48,-78,81,-98,86,-5,99,28,85,-9,-37,-58,-50,-109,76,0,-60,83,18,63,11,-46,109,-93,-7,-2,-127, 
  /* [19][0][][] */ 56,59,-85,56,91,69,-55,11,88,-37,7,-44,60,55,100,-34,32,-75,-40,92,-68,-76,21,101,19,-14,31,-19,63,39,90,-92,56,-17,-76,70,-91,-53,-60,20,51,6,44,45,-26,47,-96,80,106,13,74,-22,50,-68,64,83,47,13,-98,-30,-25,55,89,-49,84,-4,-57,77,96,-16,-83,7,12,42,16,74,12,65,-62,100,-88,-54,81,-105,31,3,60,-54,-79,-46,-27,13,-22,-26,66,-127, 
  /* [20][0][][] */ 1,-78,-8,81,83,15,87,41,-56,-43,22,26,-22,-40,-2,-68,-12,-50,106,60,47,-66,105,-19,-49,111,-73,17,21,-64,-28,9,47,88,87,-43,111,51,-60,19,97,-57,-57,-20,40,9,-23,-7,60,19,98,-54,22,90,42,-51,-35,-97,91,8,-30,80,85,95,31,82,30,-61,31,102,-37,29,-67,-47,-23,115,-9,-46,39,-29,26,107,94,-7,76,43,-31,-98,127,53,-58,-66,65,-62,39,94, 
  /* [21][0][][] */ 71,101,103,-90,-41,-54,-95,-45,-31,98,18,-97,-57,-83,-97,-104,-34,-23,-81,-112,-41,51,103,-56,89,23,81,-26,-66,-110,96,-3,-107,21,92,99,-122,-87,-119,19,-4,42,-42,7,-80,95,-127,67,67,-125,-16,-80,55,-58,-118,-66,-43,-70,79,89,9,-49,-11,55,-52,40,-68,-6,-10,-59,-18,1,-42,-104,-60,-2,-96,107,107,85,-51,96,-5,-29,-127,-77,12,27,-53,40,-77,81,-39,-61,98,-34, 
  /* [22][0][][] */ 11,-54,87,11,-36,-86,127,29,10,18,2,53,-33,59,-22,-59,-67,-11,-52,92,36,118,22,95,-41,69,-70,74,3,-61,-14,-32,-40,122,62,67,56,-44,-25,-42,24,35,-48,13,64,-53,120,-44,-74,30,-62,108,-27,121,29,73,116,89,-49,31,-79,1,24,58,84,-69,-74,0,68,106,-49,0,34,97,-44,25,-93,-45,63,-16,116,-19,-48,9,70,102,11,53,61,113,119,51,-38,37,116,97, 
  /* [23][0][][] */ -48,-12,-9,-48,-88,30,39,16,20,-97,39,-108,-105,59,62,-58,31,38,42,4,45,70,35,-5,29,-60,-53,-74,-109,64,-23,99,62,-68,74,-17,-22,80,52,-84,91,20,79,-90,-81,-13,-105,87,20,65,-37,-25,-100,78,54,-11,29,-4,29,-19,-42,46,58,-125,94,-86,13,-17,81,97,-85,86,76,22,8,-61,-116,10,-102,-25,-114,-9,-103,-96,-67,-127,85,-90,-54,-85,-48,-75,-1,-33,-85,86, 
  /* [24][0][][] */ -3,94,108,84,65,-11,-104,110,12,-96,-71,74,27,-9,1,-51,-16,46,-70,77,121,-31,-22,37,-58,54,-54,-48,82,117,93,-19,107,-40,-13,-20,11,-75,-82,-75,2,76,-67,51,-37,84,40,-59,-77,-62,34,-19,-56,76,102,-46,60,-35,-32,-14,112,43,49,-34,-102,0,-53,112,71,-90,-15,32,-3,-127,-6,-39,33,-60,-20,74,64,-56,48,-74,-76,-73,-29,-41,-93,39,-62,-20,-66,-49,63,67, 
  /* [25][0][][] */ 14,-26,27,96,24,1,-28,23,-47,84,68,71,-63,94,67,-52,-41,-19,-58,39,47,111,16,93,70,-24,-67,-15,87,54,-37,73,-41,-23,109,113,-46,81,-45,98,-37,127,59,11,7,-92,-46,-69,-57,53,-67,-5,31,26,-57,-40,51,-21,122,-25,-83,103,-42,65,-59,-56,-73,90,21,32,48,78,42,79,1,36,-4,24,45,-58,-31,33,-15,75,109,48,15,3,-39,125,-10,21,18,22,111,82, 
  /* [26][0][][] */ 71,-80,-2,7,77,-100,100,-40,35,-22,-85,15,-39,-50,30,-24,93,6,-56,-64,39,-37,70,83,44,-22,39,40,25,-10,-42,-40,-21,45,46,106,8,127,-98,96,95,42,-30,-96,-7,42,119,29,14,63,81,-19,98,94,68,37,81,0,-28,-21,10,106,-73,-87,47,-31,-103,-31,-4,-35,35,40,-100,-23,-80,-66,-22,28,-24,59,101,28,-31,13,-6,-26,6,-91,41,69,99,99,-42,43,48,8, 
  /* [27][0][][] */ 61,39,-117,127,-36,-33,5,-8,-100,98,-35,-10,-122,82,81,-53,41,-126,-7,-112,-29,63,91,-98,-90,77,-46,53,96,-67,66,-126,113,-92,39,110,118,72,-73,-49,33,80,-25,61,68,-100,116,-65,-29,-66,63,98,117,59,-122,-91,95,-36,-14,4,33,-84,-108,-93,32,113,24,-103,40,3,38,-112,26,-73,1,-86,-93,-5,74,26,-63,-80,108,14,-109,-94,65,-39,120,50,60,110,94,28,69,-83, 
  /* [28][0][][] */ -106,120,-42,57,18,100,-104,11,72,-66,-86,67,67,-89,29,-88,-60,78,37,82,105,55,4,-76,36,-68,84,112,-52,29,-15,42,-27,20,-38,-48,28,62,-37,117,-87,-55,5,68,106,117,-33,0,114,-20,-95,6,53,-41,20,50,98,49,22,92,52,-21,0,-127,-64,2,95,-37,-72,46,58,109,-104,29,117,23,66,-54,-3,76,-66,45,50,-55,44,-4,-85,-38,-114,-17,56,-77,44,78,-12,66, 
  /* [29][0][][] */ 22,-2,45,9,-16,23,18,-64,-12,-36,-34,-87,75,-27,-61,-10,94,99,-60,99,52,-68,-77,-78,71,-66,-76,-36,-38,101,-52,32,-98,115,102,8,-20,-122,36,-21,101,-86,4,44,-67,87,-127,34,-19,56,53,50,-74,-8,88,83,63,-8,-64,29,126,106,-59,25,91,-68,-89,46,79,-10,-27,-37,-23,-71,-12,-85,-41,7,15,78,2,-48,46,-50,24,-114,-70,118,-27,12,-69,-49,-93,43,-50,-102, 
  /* [30][0][][] */ -68,-77,-83,-62,58,88,41,7,-62,29,27,48,85,40,-90,-99,86,104,58,2,-6,-80,103,-65,-25,45,-20,14,68,-36,5,42,-3,-27,17,25,-84,-65,63,-17,-14,-112,-61,-73,75,111,-43,-37,-54,85,-83,-40,-107,-20,78,-97,88,51,-16,2,-39,-92,40,57,104,89,27,60,83,62,94,-72,26,-127,-77,13,56,-31,-3,-39,40,36,84,6,65,-61,45,42,79,-8,36,-102,8,80,-74,-98, 
  /* [31][0][][] */ 35,95,63,-19,-55,-9,88,-70,-70,-38,50,-43,-68,-57,75,18,-8,38,-10,31,-21,-23,85,4,94,81,-37,-51,-11,65,51,55,66,29,52,87,47,127,-3,-71,3,118,-77,27,21,80,50,9,-94,-5,-47,56,27,-68,-5,1,9,26,46,91,-6,-105,102,-72,19,-78,63,-55,-93,39,99,-24,64,-25,-31,56,-7,80,45,-62,1,0,-83,-37,-18,79,112,-89,-38,116,48,-21,-39,-40,-83,96, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0020177231635898352, 0.0020037246868014336, 0.0019241241971030831, 0.0020479697268456221, 0.0022579650394618511, 0.0022632130421698093, 0.001806543325074017, 0.0027327593415975571, 0.0019488503457978368, 0.0017679339507594705, 0.0017021413659676909, 0.001818798715248704, 0.0025373520329594612, 0.0018444712040945888, 0.0020734178833663464, 0.0018605322111397982, 0.0018280277727171779, 0.0019276177044957876, 0.0019528375705704093, 0.0021122426260262728, 0.0022061280906200409, 0.0017919868696480989, 0.0024381086695939302, 0.0019974375609308481, 0.0019438700983300805, 0.0023298126179724932, 0.0019603529945015907, 0.0017368652625009418, 0.0019570915028452873, 0.0019282937282696366, 0.0020322639029473066, 0.0021269111894071102, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -127, 176, 71, -76, 1801, 4, 693, 2279, 42, -137, -281, 256, 2073, -545, 856, 153, -119, 215, -229, 9, 737, -615, 1895, -766, -15, 1734, 77, 17, -21, 321, -50, 82, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.0589668060420081e-05, 4.030806667287834e-05, 3.8706777559127659e-05, 4.1198123653884977e-05, 4.542251190287061e-05, 4.5528082409873605e-05, 3.6341454688226804e-05, 5.497374149854295e-05, 3.920418384950608e-05, 3.5564764402806759e-05, 3.4241245884913951e-05, 3.6587989598046988e-05, 5.1042818085988984e-05, 3.7104433431522921e-05, 4.1710056393640116e-05, 3.7427525967359543e-05, 3.67736465705093e-05, 3.8777056033723056e-05, 3.9284394006244838e-05, 4.24910758738406e-05, 4.4379728933563456e-05, 3.6048630136065185e-05, 4.9046382628148422e-05, 4.0181592339649796e-05, 3.9103997551137581e-05, 4.6867837227182463e-05, 3.9435577491531149e-05, 3.4939770557684824e-05, 3.936996654374525e-05, 3.8790654798503965e-05, 4.088217974640429e-05, 4.2786155972862616e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -40,-25,-37,-42,127,5,109,44,42,-77,-86,-64,103,-21,125,-16,-81,9,90,17,91,-31,123,-47,-35,106,17,-90,-73,-95,33,24, 
  /* [1][0][][] */ 86,127,-81,-68,-20,92,10,-100,61,-90,-79,57,-100,5,7,81,-80,91,88,67,-73,3,-54,41,95,-35,-73,-87,60,92,100,-102, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0038429212290793657, 0.0038503790274262428, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 230, -5, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00016637179942335933, 0.00016669467731844634, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.067543908953666687, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.051870182156562805, } };
const TfArray<1, int> quant50_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.051791980862617493, } };
const TfArray<1, int> quant53_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.068276666104793549, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.020090809091925621, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.048502132296562195, } };
const TfArray<1, int> quant58_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.02193831093609333, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022666377946734428, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.044785972684621811, } };
const TfArray<1, int> quant61_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.058563195168972015, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.022737257182598114, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.037483934313058853, } };
const TfArray<1, int> quant65_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.074482306838035583, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.020116569474339485, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.043293055146932602, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12744356691837311, } };
const TfArray<1, int> quant69_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
